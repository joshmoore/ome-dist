// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `ILdap.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_ILdap_h__
#define __omero_api__opt_hudson_workspace_OMERO_5_0_release_src_components_blitz_generated_omero_api_ILdap_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <omero/ServicesF.h>
#include <omero/Collections.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace omero
{

namespace api
{

class ILdap;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ILdap>&);
::IceProxy::Ice::Object* upCast(::IceProxy::omero::api::ILdap*);

}

}

}

namespace omero
{

namespace api
{

class ILdap;
bool operator==(const ILdap&, const ILdap&);
bool operator<(const ILdap&, const ILdap&);
::Ice::Object* upCast(::omero::api::ILdap*);
typedef ::IceInternal::Handle< ::omero::api::ILdap> ILdapPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::omero::api::ILdap> ILdapPrx;
void __patch(ILdapPtr&, const ::Ice::ObjectPtr&);

}

}

namespace omero
{

namespace api
{

class AMI_ILdap_searchAll : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterList&) = 0;

    void __response(const ::omero::api::ExperimenterList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ILdap_searchAll> AMI_ILdap_searchAllPtr;

class AMD_ILdap_searchAll : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ILdap_searchAll> AMD_ILdap_searchAllPtr;

class AMI_ILdap_searchDnInGroups : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::StringSet&) = 0;

    void __response(const ::omero::api::StringSet& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ILdap_searchDnInGroups> AMI_ILdap_searchDnInGroupsPtr;

class AMD_ILdap_searchDnInGroups : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::StringSet&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ILdap_searchDnInGroups> AMD_ILdap_searchDnInGroupsPtr;

class AMI_ILdap_searchByAttribute : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterList&) = 0;

    void __response(const ::omero::api::ExperimenterList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ILdap_searchByAttribute> AMI_ILdap_searchByAttributePtr;

class AMD_ILdap_searchByAttribute : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ILdap_searchByAttribute> AMD_ILdap_searchByAttributePtr;

class AMI_ILdap_searchByAttributes : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterList&) = 0;

    void __response(const ::omero::api::ExperimenterList& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ILdap_searchByAttributes> AMI_ILdap_searchByAttributesPtr;

class AMD_ILdap_searchByAttributes : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::api::ExperimenterList&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ILdap_searchByAttributes> AMD_ILdap_searchByAttributesPtr;

class AMI_ILdap_searchByDN : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterPtr&) = 0;

    void __response(const ::omero::model::ExperimenterPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ILdap_searchByDN> AMI_ILdap_searchByDNPtr;

class AMD_ILdap_searchByDN : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ILdap_searchByDN> AMD_ILdap_searchByDNPtr;

class AMI_ILdap_findDN : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::std::string&) = 0;

    void __response(const ::std::string& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ILdap_findDN> AMI_ILdap_findDNPtr;

class AMD_ILdap_findDN : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::std::string&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ILdap_findDN> AMD_ILdap_findDNPtr;

class AMI_ILdap_findExperimenter : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterPtr&) = 0;

    void __response(const ::omero::model::ExperimenterPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ILdap_findExperimenter> AMI_ILdap_findExperimenterPtr;

class AMD_ILdap_findExperimenter : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ILdap_findExperimenter> AMD_ILdap_findExperimenterPtr;

class AMI_ILdap_setDN : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ILdap_setDN> AMI_ILdap_setDNPtr;

class AMD_ILdap_setDN : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ILdap_setDN> AMD_ILdap_setDNPtr;

class AMI_ILdap_getSetting : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(bool) = 0;

    void __response(bool __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ILdap_getSetting> AMI_ILdap_getSettingPtr;

class AMD_ILdap_getSetting : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(bool) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ILdap_getSetting> AMD_ILdap_getSettingPtr;

class AMI_ILdap_createUser : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterPtr&) = 0;

    void __response(const ::omero::model::ExperimenterPtr& __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::omero::api::AMI_ILdap_createUser> AMI_ILdap_createUserPtr;

class AMD_ILdap_createUser : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::omero::model::ExperimenterPtr&) = 0;
};

typedef ::IceUtil::Handle< ::omero::api::AMD_ILdap_createUser> AMD_ILdap_createUserPtr;

}

}

namespace IceAsync
{

namespace omero
{

namespace api
{

class AMD_ILdap_searchAll : public ::omero::api::AMD_ILdap_searchAll, public ::IceInternal::IncomingAsync
{
public:

    AMD_ILdap_searchAll(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::ExperimenterList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_ILdap_searchDnInGroups : public ::omero::api::AMD_ILdap_searchDnInGroups, public ::IceInternal::IncomingAsync
{
public:

    AMD_ILdap_searchDnInGroups(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::StringSet&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_ILdap_searchByAttribute : public ::omero::api::AMD_ILdap_searchByAttribute, public ::IceInternal::IncomingAsync
{
public:

    AMD_ILdap_searchByAttribute(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::ExperimenterList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_ILdap_searchByAttributes : public ::omero::api::AMD_ILdap_searchByAttributes, public ::IceInternal::IncomingAsync
{
public:

    AMD_ILdap_searchByAttributes(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::api::ExperimenterList&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_ILdap_searchByDN : public ::omero::api::AMD_ILdap_searchByDN, public ::IceInternal::IncomingAsync
{
public:

    AMD_ILdap_searchByDN(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::ExperimenterPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_ILdap_findDN : public ::omero::api::AMD_ILdap_findDN, public ::IceInternal::IncomingAsync
{
public:

    AMD_ILdap_findDN(::IceInternal::Incoming&);

    virtual void ice_response(const ::std::string&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_ILdap_findExperimenter : public ::omero::api::AMD_ILdap_findExperimenter, public ::IceInternal::IncomingAsync
{
public:

    AMD_ILdap_findExperimenter(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::ExperimenterPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_ILdap_setDN : public ::omero::api::AMD_ILdap_setDN, public ::IceInternal::IncomingAsync
{
public:

    AMD_ILdap_setDN(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_ILdap_getSetting : public ::omero::api::AMD_ILdap_getSetting, public ::IceInternal::IncomingAsync
{
public:

    AMD_ILdap_getSetting(::IceInternal::Incoming&);

    virtual void ice_response(bool);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_ILdap_createUser : public ::omero::api::AMD_ILdap_createUser, public ::IceInternal::IncomingAsync
{
public:

    AMD_ILdap_createUser(::IceInternal::Incoming&);

    virtual void ice_response(const ::omero::model::ExperimenterPtr&);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

}

}

}

namespace omero
{

namespace api
{

class Callback_ILdap_searchAll_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ILdap_searchAll_Base> Callback_ILdap_searchAllPtr;

class Callback_ILdap_searchDnInGroups_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ILdap_searchDnInGroups_Base> Callback_ILdap_searchDnInGroupsPtr;

class Callback_ILdap_searchByAttribute_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ILdap_searchByAttribute_Base> Callback_ILdap_searchByAttributePtr;

class Callback_ILdap_searchByAttributes_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ILdap_searchByAttributes_Base> Callback_ILdap_searchByAttributesPtr;

class Callback_ILdap_searchByDN_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ILdap_searchByDN_Base> Callback_ILdap_searchByDNPtr;

class Callback_ILdap_findDN_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ILdap_findDN_Base> Callback_ILdap_findDNPtr;

class Callback_ILdap_findExperimenter_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ILdap_findExperimenter_Base> Callback_ILdap_findExperimenterPtr;

class Callback_ILdap_setDN_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ILdap_setDN_Base> Callback_ILdap_setDNPtr;

class Callback_ILdap_getSetting_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ILdap_getSetting_Base> Callback_ILdap_getSettingPtr;

class Callback_ILdap_createUser_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ILdap_createUser_Base> Callback_ILdap_createUserPtr;

}

}

namespace IceProxy
{

namespace omero
{

namespace api
{

class ILdap : virtual public ::IceProxy::omero::api::ServiceInterface
{
public:

    ::omero::api::ExperimenterList searchAll()
    {
        return searchAll(0);
    }
    ::omero::api::ExperimenterList searchAll(const ::Ice::Context& __ctx)
    {
        return searchAll(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_searchAll(const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchAll(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchAll(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchAll(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_searchAll(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchAll(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchAll(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchAll(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_searchAll(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::ExperimenterList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
                ::omero::api::ExperimenterList __ret;
                try
                {
                    __ret = __proxy->end_searchAll(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::ExperimenterList&)> _response;
        };
        return begin_searchAll(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_searchAll()
    {
        return begin_searchAll(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchAll(const ::Ice::Context& __ctx)
    {
        return begin_searchAll(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchAll(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchAll(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchAll(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchAll(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchAll(const ::omero::api::Callback_ILdap_searchAllPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchAll(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchAll(const ::Ice::Context& __ctx, const ::omero::api::Callback_ILdap_searchAllPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchAll(&__ctx, __del, __cookie);
    }

    ::omero::api::ExperimenterList end_searchAll(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::ExperimenterList searchAll(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_searchAll(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool searchAll_async(const ::omero::api::AMI_ILdap_searchAllPtr&);
    bool searchAll_async(const ::omero::api::AMI_ILdap_searchAllPtr&, const ::Ice::Context&);

    ::omero::api::StringSet searchDnInGroups(const ::std::string& attr, const ::std::string& value)
    {
        return searchDnInGroups(attr, value, 0);
    }
    ::omero::api::StringSet searchDnInGroups(const ::std::string& attr, const ::std::string& value, const ::Ice::Context& __ctx)
    {
        return searchDnInGroups(attr, value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_searchDnInGroups(const ::std::string& attr, const ::std::string& value, const ::IceInternal::Function<void (const ::omero::api::StringSet&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchDnInGroups(attr, value, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchDnInGroups(const ::std::string& attr, const ::std::string& value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchDnInGroups(attr, value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_searchDnInGroups(const ::std::string& attr, const ::std::string& value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::StringSet&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchDnInGroups(attr, value, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchDnInGroups(const ::std::string& attr, const ::std::string& value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchDnInGroups(attr, value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_searchDnInGroups(const ::std::string& attr, const ::std::string& value, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::StringSet&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::StringSet&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
                ::omero::api::StringSet __ret;
                try
                {
                    __ret = __proxy->end_searchDnInGroups(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::StringSet&)> _response;
        };
        return begin_searchDnInGroups(attr, value, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_searchDnInGroups(const ::std::string& attr, const ::std::string& value)
    {
        return begin_searchDnInGroups(attr, value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchDnInGroups(const ::std::string& attr, const ::std::string& value, const ::Ice::Context& __ctx)
    {
        return begin_searchDnInGroups(attr, value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchDnInGroups(const ::std::string& attr, const ::std::string& value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchDnInGroups(attr, value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchDnInGroups(const ::std::string& attr, const ::std::string& value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchDnInGroups(attr, value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchDnInGroups(const ::std::string& attr, const ::std::string& value, const ::omero::api::Callback_ILdap_searchDnInGroupsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchDnInGroups(attr, value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchDnInGroups(const ::std::string& attr, const ::std::string& value, const ::Ice::Context& __ctx, const ::omero::api::Callback_ILdap_searchDnInGroupsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchDnInGroups(attr, value, &__ctx, __del, __cookie);
    }

    ::omero::api::StringSet end_searchDnInGroups(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::StringSet searchDnInGroups(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_searchDnInGroups(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool searchDnInGroups_async(const ::omero::api::AMI_ILdap_searchDnInGroupsPtr&, const ::std::string&, const ::std::string&);
    bool searchDnInGroups_async(const ::omero::api::AMI_ILdap_searchDnInGroupsPtr&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    ::omero::api::ExperimenterList searchByAttribute(const ::std::string& dn, const ::std::string& attribute, const ::std::string& value)
    {
        return searchByAttribute(dn, attribute, value, 0);
    }
    ::omero::api::ExperimenterList searchByAttribute(const ::std::string& dn, const ::std::string& attribute, const ::std::string& value, const ::Ice::Context& __ctx)
    {
        return searchByAttribute(dn, attribute, value, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_searchByAttribute(const ::std::string& dn, const ::std::string& attribute, const ::std::string& value, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchByAttribute(dn, attribute, value, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchByAttribute(const ::std::string& dn, const ::std::string& attribute, const ::std::string& value, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchByAttribute(dn, attribute, value, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_searchByAttribute(const ::std::string& dn, const ::std::string& attribute, const ::std::string& value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchByAttribute(dn, attribute, value, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchByAttribute(const ::std::string& dn, const ::std::string& attribute, const ::std::string& value, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchByAttribute(dn, attribute, value, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_searchByAttribute(const ::std::string& dn, const ::std::string& attribute, const ::std::string& value, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::ExperimenterList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
                ::omero::api::ExperimenterList __ret;
                try
                {
                    __ret = __proxy->end_searchByAttribute(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::ExperimenterList&)> _response;
        };
        return begin_searchByAttribute(dn, attribute, value, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_searchByAttribute(const ::std::string& dn, const ::std::string& attribute, const ::std::string& value)
    {
        return begin_searchByAttribute(dn, attribute, value, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchByAttribute(const ::std::string& dn, const ::std::string& attribute, const ::std::string& value, const ::Ice::Context& __ctx)
    {
        return begin_searchByAttribute(dn, attribute, value, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchByAttribute(const ::std::string& dn, const ::std::string& attribute, const ::std::string& value, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchByAttribute(dn, attribute, value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchByAttribute(const ::std::string& dn, const ::std::string& attribute, const ::std::string& value, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchByAttribute(dn, attribute, value, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchByAttribute(const ::std::string& dn, const ::std::string& attribute, const ::std::string& value, const ::omero::api::Callback_ILdap_searchByAttributePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchByAttribute(dn, attribute, value, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchByAttribute(const ::std::string& dn, const ::std::string& attribute, const ::std::string& value, const ::Ice::Context& __ctx, const ::omero::api::Callback_ILdap_searchByAttributePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchByAttribute(dn, attribute, value, &__ctx, __del, __cookie);
    }

    ::omero::api::ExperimenterList end_searchByAttribute(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::ExperimenterList searchByAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_searchByAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool searchByAttribute_async(const ::omero::api::AMI_ILdap_searchByAttributePtr&, const ::std::string&, const ::std::string&, const ::std::string&);
    bool searchByAttribute_async(const ::omero::api::AMI_ILdap_searchByAttributePtr&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context&);

    ::omero::api::ExperimenterList searchByAttributes(const ::std::string& dn, const ::omero::api::StringSet& attributes, const ::omero::api::StringSet& values)
    {
        return searchByAttributes(dn, attributes, values, 0);
    }
    ::omero::api::ExperimenterList searchByAttributes(const ::std::string& dn, const ::omero::api::StringSet& attributes, const ::omero::api::StringSet& values, const ::Ice::Context& __ctx)
    {
        return searchByAttributes(dn, attributes, values, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_searchByAttributes(const ::std::string& dn, const ::omero::api::StringSet& attributes, const ::omero::api::StringSet& values, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchByAttributes(dn, attributes, values, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchByAttributes(const ::std::string& dn, const ::omero::api::StringSet& attributes, const ::omero::api::StringSet& values, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchByAttributes(dn, attributes, values, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_searchByAttributes(const ::std::string& dn, const ::omero::api::StringSet& attributes, const ::omero::api::StringSet& values, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchByAttributes(dn, attributes, values, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchByAttributes(const ::std::string& dn, const ::omero::api::StringSet& attributes, const ::omero::api::StringSet& values, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchByAttributes(dn, attributes, values, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_searchByAttributes(const ::std::string& dn, const ::omero::api::StringSet& attributes, const ::omero::api::StringSet& values, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::api::ExperimenterList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::api::ExperimenterList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
                ::omero::api::ExperimenterList __ret;
                try
                {
                    __ret = __proxy->end_searchByAttributes(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::api::ExperimenterList&)> _response;
        };
        return begin_searchByAttributes(dn, attributes, values, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_searchByAttributes(const ::std::string& dn, const ::omero::api::StringSet& attributes, const ::omero::api::StringSet& values)
    {
        return begin_searchByAttributes(dn, attributes, values, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchByAttributes(const ::std::string& dn, const ::omero::api::StringSet& attributes, const ::omero::api::StringSet& values, const ::Ice::Context& __ctx)
    {
        return begin_searchByAttributes(dn, attributes, values, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchByAttributes(const ::std::string& dn, const ::omero::api::StringSet& attributes, const ::omero::api::StringSet& values, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchByAttributes(dn, attributes, values, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchByAttributes(const ::std::string& dn, const ::omero::api::StringSet& attributes, const ::omero::api::StringSet& values, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchByAttributes(dn, attributes, values, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchByAttributes(const ::std::string& dn, const ::omero::api::StringSet& attributes, const ::omero::api::StringSet& values, const ::omero::api::Callback_ILdap_searchByAttributesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchByAttributes(dn, attributes, values, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchByAttributes(const ::std::string& dn, const ::omero::api::StringSet& attributes, const ::omero::api::StringSet& values, const ::Ice::Context& __ctx, const ::omero::api::Callback_ILdap_searchByAttributesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchByAttributes(dn, attributes, values, &__ctx, __del, __cookie);
    }

    ::omero::api::ExperimenterList end_searchByAttributes(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::api::ExperimenterList searchByAttributes(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_searchByAttributes(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool searchByAttributes_async(const ::omero::api::AMI_ILdap_searchByAttributesPtr&, const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&);
    bool searchByAttributes_async(const ::omero::api::AMI_ILdap_searchByAttributesPtr&, const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::Ice::Context&);

    ::omero::model::ExperimenterPtr searchByDN(const ::std::string& userdn)
    {
        return searchByDN(userdn, 0);
    }
    ::omero::model::ExperimenterPtr searchByDN(const ::std::string& userdn, const ::Ice::Context& __ctx)
    {
        return searchByDN(userdn, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_searchByDN(const ::std::string& userdn, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchByDN(userdn, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchByDN(const ::std::string& userdn, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchByDN(userdn, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_searchByDN(const ::std::string& userdn, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_searchByDN(userdn, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_searchByDN(const ::std::string& userdn, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_searchByDN(userdn, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_searchByDN(const ::std::string& userdn, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimenterPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimenterPtr __ret;
                try
                {
                    __ret = __proxy->end_searchByDN(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimenterPtr&)> _response;
        };
        return begin_searchByDN(userdn, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_searchByDN(const ::std::string& userdn)
    {
        return begin_searchByDN(userdn, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchByDN(const ::std::string& userdn, const ::Ice::Context& __ctx)
    {
        return begin_searchByDN(userdn, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_searchByDN(const ::std::string& userdn, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchByDN(userdn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchByDN(const ::std::string& userdn, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchByDN(userdn, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchByDN(const ::std::string& userdn, const ::omero::api::Callback_ILdap_searchByDNPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchByDN(userdn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_searchByDN(const ::std::string& userdn, const ::Ice::Context& __ctx, const ::omero::api::Callback_ILdap_searchByDNPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_searchByDN(userdn, &__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterPtr end_searchByDN(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterPtr searchByDN(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_searchByDN(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool searchByDN_async(const ::omero::api::AMI_ILdap_searchByDNPtr&, const ::std::string&);
    bool searchByDN_async(const ::omero::api::AMI_ILdap_searchByDNPtr&, const ::std::string&, const ::Ice::Context&);

    ::std::string findDN(const ::std::string& username)
    {
        return findDN(username, 0);
    }
    ::std::string findDN(const ::std::string& username, const ::Ice::Context& __ctx)
    {
        return findDN(username, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findDN(const ::std::string& username, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findDN(username, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findDN(const ::std::string& username, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findDN(username, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findDN(const ::std::string& username, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findDN(username, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findDN(const ::std::string& username, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findDN(username, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findDN(const ::std::string& username, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_findDN(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_findDN(username, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findDN(const ::std::string& username)
    {
        return begin_findDN(username, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findDN(const ::std::string& username, const ::Ice::Context& __ctx)
    {
        return begin_findDN(username, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findDN(const ::std::string& username, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findDN(username, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findDN(const ::std::string& username, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findDN(username, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findDN(const ::std::string& username, const ::omero::api::Callback_ILdap_findDNPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findDN(username, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findDN(const ::std::string& username, const ::Ice::Context& __ctx, const ::omero::api::Callback_ILdap_findDNPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findDN(username, &__ctx, __del, __cookie);
    }

    ::std::string end_findDN(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string findDN(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findDN(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool findDN_async(const ::omero::api::AMI_ILdap_findDNPtr&, const ::std::string&);
    bool findDN_async(const ::omero::api::AMI_ILdap_findDNPtr&, const ::std::string&, const ::Ice::Context&);

    ::omero::model::ExperimenterPtr findExperimenter(const ::std::string& username)
    {
        return findExperimenter(username, 0);
    }
    ::omero::model::ExperimenterPtr findExperimenter(const ::std::string& username, const ::Ice::Context& __ctx)
    {
        return findExperimenter(username, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_findExperimenter(const ::std::string& username, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findExperimenter(username, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findExperimenter(const ::std::string& username, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findExperimenter(username, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_findExperimenter(const ::std::string& username, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_findExperimenter(username, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_findExperimenter(const ::std::string& username, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_findExperimenter(username, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_findExperimenter(const ::std::string& username, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimenterPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimenterPtr __ret;
                try
                {
                    __ret = __proxy->end_findExperimenter(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimenterPtr&)> _response;
        };
        return begin_findExperimenter(username, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_findExperimenter(const ::std::string& username)
    {
        return begin_findExperimenter(username, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findExperimenter(const ::std::string& username, const ::Ice::Context& __ctx)
    {
        return begin_findExperimenter(username, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_findExperimenter(const ::std::string& username, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findExperimenter(username, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findExperimenter(const ::std::string& username, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findExperimenter(username, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findExperimenter(const ::std::string& username, const ::omero::api::Callback_ILdap_findExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findExperimenter(username, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_findExperimenter(const ::std::string& username, const ::Ice::Context& __ctx, const ::omero::api::Callback_ILdap_findExperimenterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_findExperimenter(username, &__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterPtr end_findExperimenter(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterPtr findExperimenter(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_findExperimenter(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool findExperimenter_async(const ::omero::api::AMI_ILdap_findExperimenterPtr&, const ::std::string&);
    bool findExperimenter_async(const ::omero::api::AMI_ILdap_findExperimenterPtr&, const ::std::string&, const ::Ice::Context&);

    void setDN(const ::omero::RLongPtr& experimenterID, const ::std::string& dn)
    {
        setDN(experimenterID, dn, 0);
    }
    void setDN(const ::omero::RLongPtr& experimenterID, const ::std::string& dn, const ::Ice::Context& __ctx)
    {
        setDN(experimenterID, dn, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDN(const ::omero::RLongPtr& experimenterID, const ::std::string& dn, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setDN(experimenterID, dn, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setDN(const ::omero::RLongPtr& experimenterID, const ::std::string& dn, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDN(experimenterID, dn, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDN(const ::omero::RLongPtr& experimenterID, const ::std::string& dn, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setDN(experimenterID, dn, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setDN(const ::omero::RLongPtr& experimenterID, const ::std::string& dn, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDN(experimenterID, dn, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setDN(const ::omero::RLongPtr& experimenterID, const ::std::string& dn, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setDN(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setDN(experimenterID, dn, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setDN(const ::omero::RLongPtr& experimenterID, const ::std::string& dn)
    {
        return begin_setDN(experimenterID, dn, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDN(const ::omero::RLongPtr& experimenterID, const ::std::string& dn, const ::Ice::Context& __ctx)
    {
        return begin_setDN(experimenterID, dn, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDN(const ::omero::RLongPtr& experimenterID, const ::std::string& dn, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDN(experimenterID, dn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDN(const ::omero::RLongPtr& experimenterID, const ::std::string& dn, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDN(experimenterID, dn, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDN(const ::omero::RLongPtr& experimenterID, const ::std::string& dn, const ::omero::api::Callback_ILdap_setDNPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDN(experimenterID, dn, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDN(const ::omero::RLongPtr& experimenterID, const ::std::string& dn, const ::Ice::Context& __ctx, const ::omero::api::Callback_ILdap_setDNPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDN(experimenterID, dn, &__ctx, __del, __cookie);
    }

    void end_setDN(const ::Ice::AsyncResultPtr&);
    
private:

    void setDN(const ::omero::RLongPtr&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDN(const ::omero::RLongPtr&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool setDN_async(const ::omero::api::AMI_ILdap_setDNPtr&, const ::omero::RLongPtr&, const ::std::string&);
    bool setDN_async(const ::omero::api::AMI_ILdap_setDNPtr&, const ::omero::RLongPtr&, const ::std::string&, const ::Ice::Context&);

    bool getSetting()
    {
        return getSetting(0);
    }
    bool getSetting(const ::Ice::Context& __ctx)
    {
        return getSetting(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getSetting(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSetting(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSetting(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSetting(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getSetting(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getSetting(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getSetting(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getSetting(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getSetting(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_getSetting(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_getSetting(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getSetting()
    {
        return begin_getSetting(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSetting(const ::Ice::Context& __ctx)
    {
        return begin_getSetting(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getSetting(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSetting(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSetting(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSetting(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSetting(const ::omero::api::Callback_ILdap_getSettingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSetting(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getSetting(const ::Ice::Context& __ctx, const ::omero::api::Callback_ILdap_getSettingPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getSetting(&__ctx, __del, __cookie);
    }

    bool end_getSetting(const ::Ice::AsyncResultPtr&);
    
private:

    bool getSetting(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getSetting(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool getSetting_async(const ::omero::api::AMI_ILdap_getSettingPtr&);
    bool getSetting_async(const ::omero::api::AMI_ILdap_getSettingPtr&, const ::Ice::Context&);

    ::omero::model::ExperimenterPtr createUser(const ::std::string& username)
    {
        return createUser(username, 0);
    }
    ::omero::model::ExperimenterPtr createUser(const ::std::string& username, const ::Ice::Context& __ctx)
    {
        return createUser(username, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createUser(const ::std::string& username, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createUser(username, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createUser(const ::std::string& username, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createUser(username, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createUser(const ::std::string& username, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createUser(username, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createUser(const ::std::string& username, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createUser(username, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createUser(const ::std::string& username, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::omero::model::ExperimenterPtr&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::omero::model::ExperimenterPtr&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
                ::omero::model::ExperimenterPtr __ret;
                try
                {
                    __ret = __proxy->end_createUser(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::omero::model::ExperimenterPtr&)> _response;
        };
        return begin_createUser(username, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createUser(const ::std::string& username)
    {
        return begin_createUser(username, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::std::string& username, const ::Ice::Context& __ctx)
    {
        return begin_createUser(username, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::std::string& username, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createUser(username, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::std::string& username, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createUser(username, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::std::string& username, const ::omero::api::Callback_ILdap_createUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createUser(username, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createUser(const ::std::string& username, const ::Ice::Context& __ctx, const ::omero::api::Callback_ILdap_createUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createUser(username, &__ctx, __del, __cookie);
    }

    ::omero::model::ExperimenterPtr end_createUser(const ::Ice::AsyncResultPtr&);
    
private:

    ::omero::model::ExperimenterPtr createUser(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createUser(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool createUser_async(const ::omero::api::AMI_ILdap_createUserPtr&, const ::std::string&);
    bool createUser_async(const ::omero::api::AMI_ILdap_createUserPtr&, const ::std::string&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<ILdap> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_secure(bool __secure) const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_twoway() const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_oneway() const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_batchOneway() const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_datagram() const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_batchDatagram() const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_compress(bool __compress) const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ILdap> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ILdap*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

}

namespace IceDelegate
{

namespace omero
{

namespace api
{

class ILdap : virtual public ::IceDelegate::omero::api::ServiceInterface
{
public:

    virtual ::omero::api::ExperimenterList searchAll(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::StringSet searchDnInGroups(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::ExperimenterList searchByAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::api::ExperimenterList searchByAttributes(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ExperimenterPtr searchByDN(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string findDN(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ExperimenterPtr findExperimenter(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setDN(const ::omero::RLongPtr&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool getSetting(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::omero::model::ExperimenterPtr createUser(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

}

namespace IceDelegateM
{

namespace omero
{

namespace api
{

class ILdap : virtual public ::IceDelegate::omero::api::ILdap,
              virtual public ::IceDelegateM::omero::api::ServiceInterface
{
public:

    virtual ::omero::api::ExperimenterList searchAll(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::StringSet searchDnInGroups(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::ExperimenterList searchByAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::ExperimenterList searchByAttributes(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterPtr searchByDN(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string findDN(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterPtr findExperimenter(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDN(const ::omero::RLongPtr&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool getSetting(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterPtr createUser(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace IceDelegateD
{

namespace omero
{

namespace api
{

class ILdap : virtual public ::IceDelegate::omero::api::ILdap,
              virtual public ::IceDelegateD::omero::api::ServiceInterface
{
public:

    virtual ::omero::api::ExperimenterList searchAll(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::StringSet searchDnInGroups(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::ExperimenterList searchByAttribute(const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::api::ExperimenterList searchByAttributes(const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterPtr searchByDN(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string findDN(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterPtr findExperimenter(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDN(const ::omero::RLongPtr&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool getSetting(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::omero::model::ExperimenterPtr createUser(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

}

namespace omero
{

namespace api
{

class ILdap : virtual public ::omero::api::ServiceInterface
{
public:

    typedef ILdapPrx ProxyType;
    typedef ILdapPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void searchAll_async(const ::omero::api::AMD_ILdap_searchAllPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___searchAll(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void searchDnInGroups_async(const ::omero::api::AMD_ILdap_searchDnInGroupsPtr&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___searchDnInGroups(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void searchByAttribute_async(const ::omero::api::AMD_ILdap_searchByAttributePtr&, const ::std::string&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___searchByAttribute(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void searchByAttributes_async(const ::omero::api::AMD_ILdap_searchByAttributesPtr&, const ::std::string&, const ::omero::api::StringSet&, const ::omero::api::StringSet&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___searchByAttributes(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void searchByDN_async(const ::omero::api::AMD_ILdap_searchByDNPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___searchByDN(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void findDN_async(const ::omero::api::AMD_ILdap_findDNPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findDN(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void findExperimenter_async(const ::omero::api::AMD_ILdap_findExperimenterPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___findExperimenter(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setDN_async(const ::omero::api::AMD_ILdap_setDNPtr&, const ::omero::RLongPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDN(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getSetting_async(const ::omero::api::AMD_ILdap_getSettingPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getSetting(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void createUser_async(const ::omero::api::AMD_ILdap_createUserPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const ILdap& l, const ILdap& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ILdap& l, const ILdap& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

}

namespace omero
{

namespace api
{

template<class T>
class CallbackNC_ILdap_searchAll : public Callback_ILdap_searchAll_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::ExperimenterList&);

    CallbackNC_ILdap_searchAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterList __ret;
        try
        {
            __ret = __proxy->end_searchAll(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ILdap_searchAllPtr
newCallback_ILdap_searchAll(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_searchAll<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ILdap_searchAllPtr
newCallback_ILdap_searchAll(T* instance, void (T::*cb)(const ::omero::api::ExperimenterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_searchAll<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ILdap_searchAll : public Callback_ILdap_searchAll_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::ExperimenterList&, const CT&);

    Callback_ILdap_searchAll(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterList __ret;
        try
        {
            __ret = __proxy->end_searchAll(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ILdap_searchAllPtr
newCallback_ILdap_searchAll(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_searchAll<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ILdap_searchAllPtr
newCallback_ILdap_searchAll(T* instance, void (T::*cb)(const ::omero::api::ExperimenterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_searchAll<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ILdap_searchDnInGroups : public Callback_ILdap_searchDnInGroups_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::StringSet&);

    CallbackNC_ILdap_searchDnInGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::omero::api::StringSet __ret;
        try
        {
            __ret = __proxy->end_searchDnInGroups(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ILdap_searchDnInGroupsPtr
newCallback_ILdap_searchDnInGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::StringSet&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_searchDnInGroups<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ILdap_searchDnInGroupsPtr
newCallback_ILdap_searchDnInGroups(T* instance, void (T::*cb)(const ::omero::api::StringSet&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_searchDnInGroups<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ILdap_searchDnInGroups : public Callback_ILdap_searchDnInGroups_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::StringSet&, const CT&);

    Callback_ILdap_searchDnInGroups(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::omero::api::StringSet __ret;
        try
        {
            __ret = __proxy->end_searchDnInGroups(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ILdap_searchDnInGroupsPtr
newCallback_ILdap_searchDnInGroups(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::StringSet&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_searchDnInGroups<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ILdap_searchDnInGroupsPtr
newCallback_ILdap_searchDnInGroups(T* instance, void (T::*cb)(const ::omero::api::StringSet&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_searchDnInGroups<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ILdap_searchByAttribute : public Callback_ILdap_searchByAttribute_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::ExperimenterList&);

    CallbackNC_ILdap_searchByAttribute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterList __ret;
        try
        {
            __ret = __proxy->end_searchByAttribute(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ILdap_searchByAttributePtr
newCallback_ILdap_searchByAttribute(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_searchByAttribute<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ILdap_searchByAttributePtr
newCallback_ILdap_searchByAttribute(T* instance, void (T::*cb)(const ::omero::api::ExperimenterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_searchByAttribute<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ILdap_searchByAttribute : public Callback_ILdap_searchByAttribute_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::ExperimenterList&, const CT&);

    Callback_ILdap_searchByAttribute(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterList __ret;
        try
        {
            __ret = __proxy->end_searchByAttribute(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ILdap_searchByAttributePtr
newCallback_ILdap_searchByAttribute(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_searchByAttribute<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ILdap_searchByAttributePtr
newCallback_ILdap_searchByAttribute(T* instance, void (T::*cb)(const ::omero::api::ExperimenterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_searchByAttribute<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ILdap_searchByAttributes : public Callback_ILdap_searchByAttributes_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::api::ExperimenterList&);

    CallbackNC_ILdap_searchByAttributes(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterList __ret;
        try
        {
            __ret = __proxy->end_searchByAttributes(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ILdap_searchByAttributesPtr
newCallback_ILdap_searchByAttributes(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_searchByAttributes<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ILdap_searchByAttributesPtr
newCallback_ILdap_searchByAttributes(T* instance, void (T::*cb)(const ::omero::api::ExperimenterList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_searchByAttributes<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ILdap_searchByAttributes : public Callback_ILdap_searchByAttributes_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::api::ExperimenterList&, const CT&);

    Callback_ILdap_searchByAttributes(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::omero::api::ExperimenterList __ret;
        try
        {
            __ret = __proxy->end_searchByAttributes(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ILdap_searchByAttributesPtr
newCallback_ILdap_searchByAttributes(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::api::ExperimenterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_searchByAttributes<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ILdap_searchByAttributesPtr
newCallback_ILdap_searchByAttributes(T* instance, void (T::*cb)(const ::omero::api::ExperimenterList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_searchByAttributes<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ILdap_searchByDN : public Callback_ILdap_searchByDN_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterPtr&);

    CallbackNC_ILdap_searchByDN(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterPtr __ret;
        try
        {
            __ret = __proxy->end_searchByDN(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ILdap_searchByDNPtr
newCallback_ILdap_searchByDN(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_searchByDN<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ILdap_searchByDNPtr
newCallback_ILdap_searchByDN(T* instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_searchByDN<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ILdap_searchByDN : public Callback_ILdap_searchByDN_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterPtr&, const CT&);

    Callback_ILdap_searchByDN(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterPtr __ret;
        try
        {
            __ret = __proxy->end_searchByDN(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ILdap_searchByDNPtr
newCallback_ILdap_searchByDN(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_searchByDN<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ILdap_searchByDNPtr
newCallback_ILdap_searchByDN(T* instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_searchByDN<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ILdap_findDN : public Callback_ILdap_findDN_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_ILdap_findDN(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_findDN(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ILdap_findDNPtr
newCallback_ILdap_findDN(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_findDN<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ILdap_findDNPtr
newCallback_ILdap_findDN(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_findDN<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ILdap_findDN : public Callback_ILdap_findDN_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_ILdap_findDN(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_findDN(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ILdap_findDNPtr
newCallback_ILdap_findDN(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_findDN<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ILdap_findDNPtr
newCallback_ILdap_findDN(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_findDN<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ILdap_findExperimenter : public Callback_ILdap_findExperimenter_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterPtr&);

    CallbackNC_ILdap_findExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterPtr __ret;
        try
        {
            __ret = __proxy->end_findExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ILdap_findExperimenterPtr
newCallback_ILdap_findExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_findExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ILdap_findExperimenterPtr
newCallback_ILdap_findExperimenter(T* instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_findExperimenter<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ILdap_findExperimenter : public Callback_ILdap_findExperimenter_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterPtr&, const CT&);

    Callback_ILdap_findExperimenter(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterPtr __ret;
        try
        {
            __ret = __proxy->end_findExperimenter(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ILdap_findExperimenterPtr
newCallback_ILdap_findExperimenter(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_findExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ILdap_findExperimenterPtr
newCallback_ILdap_findExperimenter(T* instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_findExperimenter<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ILdap_setDN : public Callback_ILdap_setDN_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ILdap_setDN(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setDN(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_ILdap_setDNPtr
newCallback_ILdap_setDN(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_setDN<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ILdap_setDNPtr
newCallback_ILdap_setDN(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_setDN<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ILdap_setDNPtr
newCallback_ILdap_setDN(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_setDN<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ILdap_setDNPtr
newCallback_ILdap_setDN(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_setDN<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ILdap_setDN : public Callback_ILdap_setDN_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ILdap_setDN(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setDN(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ILdap_setDNPtr
newCallback_ILdap_setDN(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_setDN<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ILdap_setDNPtr
newCallback_ILdap_setDN(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_setDN<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ILdap_setDNPtr
newCallback_ILdap_setDN(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_setDN<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ILdap_setDNPtr
newCallback_ILdap_setDN(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_setDN<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ILdap_getSetting : public Callback_ILdap_getSetting_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_ILdap_getSetting(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_getSetting(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ILdap_getSettingPtr
newCallback_ILdap_getSetting(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_getSetting<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ILdap_getSettingPtr
newCallback_ILdap_getSetting(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_getSetting<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ILdap_getSetting : public Callback_ILdap_getSetting_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_ILdap_getSetting(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_getSetting(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ILdap_getSettingPtr
newCallback_ILdap_getSetting(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_getSetting<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ILdap_getSettingPtr
newCallback_ILdap_getSetting(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_getSetting<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ILdap_createUser : public Callback_ILdap_createUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::omero::model::ExperimenterPtr&);

    CallbackNC_ILdap_createUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterPtr __ret;
        try
        {
            __ret = __proxy->end_createUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ILdap_createUserPtr
newCallback_ILdap_createUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_createUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ILdap_createUserPtr
newCallback_ILdap_createUser(T* instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ILdap_createUser<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ILdap_createUser : public Callback_ILdap_createUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::omero::model::ExperimenterPtr&, const CT&);

    Callback_ILdap_createUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::omero::api::ILdapPrx __proxy = ::omero::api::ILdapPrx::uncheckedCast(__result->getProxy());
        ::omero::model::ExperimenterPtr __ret;
        try
        {
            __ret = __proxy->end_createUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ILdap_createUserPtr
newCallback_ILdap_createUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_createUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ILdap_createUserPtr
newCallback_ILdap_createUser(T* instance, void (T::*cb)(const ::omero::model::ExperimenterPtr&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ILdap_createUser<T, CT>(instance, cb, excb, sentcb);
}

}

}

#endif
