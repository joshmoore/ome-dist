   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef AFFINETRANSFORMI_H
#define AFFINETRANSFORMI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/AffineTransform.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT AffineTransformI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::AffineTransformI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<AffineTransformI> AffineTransformIPtr;
    class OMERO_CLIENT AffineTransformI : virtual public AffineTransform {
   public:
      static const std::string A00;
      static const std::string A10;
      static const std::string A01;
      static const std::string A11;
      static const std::string A02;
      static const std::string A12;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool /*unused*/);
      virtual ~AffineTransformI();
    public:
      AffineTransformI();
      AffineTransformI(omero::RLongPtr idPtr, bool isLoaded = false);
      AffineTransformI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  AffineTransform.a00
      //
      virtual void unloadA00();
      virtual omero::RDoublePtr getA00(const Ice::Current& current = Ice::Current());
      virtual void setA00(const omero::RDoublePtr& _a00, const Ice::Current& current = Ice::Current());

      //
      //  AffineTransform.a10
      //
      virtual void unloadA10();
      virtual omero::RDoublePtr getA10(const Ice::Current& current = Ice::Current());
      virtual void setA10(const omero::RDoublePtr& _a10, const Ice::Current& current = Ice::Current());

      //
      //  AffineTransform.a01
      //
      virtual void unloadA01();
      virtual omero::RDoublePtr getA01(const Ice::Current& current = Ice::Current());
      virtual void setA01(const omero::RDoublePtr& _a01, const Ice::Current& current = Ice::Current());

      //
      //  AffineTransform.a11
      //
      virtual void unloadA11();
      virtual omero::RDoublePtr getA11(const Ice::Current& current = Ice::Current());
      virtual void setA11(const omero::RDoublePtr& _a11, const Ice::Current& current = Ice::Current());

      //
      //  AffineTransform.a02
      //
      virtual void unloadA02();
      virtual omero::RDoublePtr getA02(const Ice::Current& current = Ice::Current());
      virtual void setA02(const omero::RDoublePtr& _a02, const Ice::Current& current = Ice::Current());

      //
      //  AffineTransform.a12
      //
      virtual void unloadA12();
      virtual omero::RDoublePtr getA12(const Ice::Current& current = Ice::Current());
      virtual void setA12(const omero::RDoublePtr& _a12, const Ice::Current& current = Ice::Current());
 };

}}
#endif // AFFINETRANSFORMI_H
