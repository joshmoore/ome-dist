   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef CHANNELBINDINGI_H
#define CHANNELBINDINGI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/ChannelBinding.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT ChannelBindingI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::ChannelBindingI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<ChannelBindingI> ChannelBindingIPtr;
    class OMERO_CLIENT ChannelBindingI : virtual public ChannelBinding {
   public:
      static const std::string RENDERINGDEF;
      static const std::string FAMILY;
      static const std::string COEFFICIENT;
      static const std::string INPUTSTART;
      static const std::string INPUTEND;
      static const std::string ACTIVE;
      static const std::string NOISEREDUCTION;
      static const std::string RED;
      static const std::string GREEN;
      static const std::string BLUE;
      static const std::string ALPHA;
      static const std::string LOOKUPTABLE;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool /*unused*/);
      virtual ~ChannelBindingI();
    public:
      ChannelBindingI();
      ChannelBindingI(omero::RLongPtr idPtr, bool isLoaded = false);
      ChannelBindingI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  ChannelBinding.renderingDef
      //
      virtual void unloadRenderingDef();
      virtual omero::model::RenderingDefPtr getRenderingDef(const Ice::Current& current = Ice::Current());
      virtual void setRenderingDef(const omero::model::RenderingDefPtr& _renderingDef, const Ice::Current& current = Ice::Current());

      //
      //  ChannelBinding.family
      //
      virtual void unloadFamily();
      virtual omero::model::FamilyPtr getFamily(const Ice::Current& current = Ice::Current());
      virtual void setFamily(const omero::model::FamilyPtr& _family, const Ice::Current& current = Ice::Current());

      //
      //  ChannelBinding.coefficient
      //
      virtual void unloadCoefficient();
      virtual omero::RDoublePtr getCoefficient(const Ice::Current& current = Ice::Current());
      virtual void setCoefficient(const omero::RDoublePtr& _coefficient, const Ice::Current& current = Ice::Current());

      //
      //  ChannelBinding.inputStart
      //
      virtual void unloadInputStart();
      virtual omero::RDoublePtr getInputStart(const Ice::Current& current = Ice::Current());
      virtual void setInputStart(const omero::RDoublePtr& _inputStart, const Ice::Current& current = Ice::Current());

      //
      //  ChannelBinding.inputEnd
      //
      virtual void unloadInputEnd();
      virtual omero::RDoublePtr getInputEnd(const Ice::Current& current = Ice::Current());
      virtual void setInputEnd(const omero::RDoublePtr& _inputEnd, const Ice::Current& current = Ice::Current());

      //
      //  ChannelBinding.active
      //
      virtual void unloadActive();
      virtual omero::RBoolPtr getActive(const Ice::Current& current = Ice::Current());
      virtual void setActive(const omero::RBoolPtr& _active, const Ice::Current& current = Ice::Current());

      //
      //  ChannelBinding.noiseReduction
      //
      virtual void unloadNoiseReduction();
      virtual omero::RBoolPtr getNoiseReduction(const Ice::Current& current = Ice::Current());
      virtual void setNoiseReduction(const omero::RBoolPtr& _noiseReduction, const Ice::Current& current = Ice::Current());

      //
      //  ChannelBinding.red
      //
      virtual void unloadRed();
      virtual omero::RIntPtr getRed(const Ice::Current& current = Ice::Current());
      virtual void setRed(const omero::RIntPtr& _red, const Ice::Current& current = Ice::Current());

      //
      //  ChannelBinding.green
      //
      virtual void unloadGreen();
      virtual omero::RIntPtr getGreen(const Ice::Current& current = Ice::Current());
      virtual void setGreen(const omero::RIntPtr& _green, const Ice::Current& current = Ice::Current());

      //
      //  ChannelBinding.blue
      //
      virtual void unloadBlue();
      virtual omero::RIntPtr getBlue(const Ice::Current& current = Ice::Current());
      virtual void setBlue(const omero::RIntPtr& _blue, const Ice::Current& current = Ice::Current());

      //
      //  ChannelBinding.alpha
      //
      virtual void unloadAlpha();
      virtual omero::RIntPtr getAlpha(const Ice::Current& current = Ice::Current());
      virtual void setAlpha(const omero::RIntPtr& _alpha, const Ice::Current& current = Ice::Current());

      //
      //  ChannelBinding.lookupTable
      //
      virtual void unloadLookupTable();
      virtual omero::RStringPtr getLookupTable(const Ice::Current& current = Ice::Current());
      virtual void setLookupTable(const omero::RStringPtr& _lookupTable, const Ice::Current& current = Ice::Current());
 };

}}
#endif // CHANNELBINDINGI_H
