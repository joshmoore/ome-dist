   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef DBPATCHI_H
#define DBPATCHI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/DBPatch.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#if ICE_INT_VERSION / 100 >= 304
#   include <Ice/Handle.h>
#else
#   include <IceUtil/Handle.h>
#endif
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT DBPatchI;
  }
}
#if ICE_INT_VERSION / 100 >= 304
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::DBPatchI*);
}
#endif
namespace omero {
  namespace model {
#if ICE_INT_VERSION / 100 >= 304
  typedef IceInternal::Handle<DBPatchI> DBPatchIPtr;
#else
  typedef IceUtil::Handle<DBPatchI> DBPatchIPtr;
#endif
    class OMERO_CLIENT DBPatchI : virtual public DBPatch {
   public:
      static const std::string CURRENTVERSION;
      static const std::string CURRENTPATCH;
      static const std::string PREVIOUSVERSION;
      static const std::string PREVIOUSPATCH;
      static const std::string FINISHED;
      static const std::string MESSAGE;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool /*unused*/);
      virtual ~DBPatchI();
    public:
      DBPatchI();
      DBPatchI(omero::RLongPtr idPtr, bool isLoaded = false);
      DBPatchI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );

      //
      //  DBPatch.currentVersion
      //
      virtual void unloadCurrentVersion();
      virtual omero::RStringPtr getCurrentVersion(const Ice::Current& current = Ice::Current());
      virtual void setCurrentVersion(const omero::RStringPtr& _currentVersion, const Ice::Current& current = Ice::Current());

      //
      //  DBPatch.currentPatch
      //
      virtual void unloadCurrentPatch();
      virtual omero::RIntPtr getCurrentPatch(const Ice::Current& current = Ice::Current());
      virtual void setCurrentPatch(const omero::RIntPtr& _currentPatch, const Ice::Current& current = Ice::Current());

      //
      //  DBPatch.previousVersion
      //
      virtual void unloadPreviousVersion();
      virtual omero::RStringPtr getPreviousVersion(const Ice::Current& current = Ice::Current());
      virtual void setPreviousVersion(const omero::RStringPtr& _previousVersion, const Ice::Current& current = Ice::Current());

      //
      //  DBPatch.previousPatch
      //
      virtual void unloadPreviousPatch();
      virtual omero::RIntPtr getPreviousPatch(const Ice::Current& current = Ice::Current());
      virtual void setPreviousPatch(const omero::RIntPtr& _previousPatch, const Ice::Current& current = Ice::Current());

      //
      //  DBPatch.finished
      //
      virtual void unloadFinished();
      virtual omero::RTimePtr getFinished(const Ice::Current& current = Ice::Current());
      virtual void setFinished(const omero::RTimePtr& _finished, const Ice::Current& current = Ice::Current());

      //
      //  DBPatch.message
      //
      virtual void unloadMessage();
      virtual omero::RStringPtr getMessage(const Ice::Current& current = Ice::Current());
      virtual void setMessage(const omero::RStringPtr& _message, const Ice::Current& current = Ice::Current());
 };

}}
#endif // DBPATCHI_H
