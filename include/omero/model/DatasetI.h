   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef DATASETI_H
#define DATASETI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/Dataset.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT DatasetI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::DatasetI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<DatasetI> DatasetIPtr;
    class OMERO_CLIENT DatasetI : virtual public Dataset {
   public:
      static const std::string PROJECTLINKS;
      static const std::string IMAGELINKS;
      static const std::string ANNOTATIONLINKS;
      static const std::string NAME;
      static const std::string DESCRIPTION;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~DatasetI();
    public:
      DatasetI();
      DatasetI(omero::RLongPtr idPtr, bool isLoaded = false);
      DatasetI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  Dataset.projectLinks
      //
      virtual void unloadProjectLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual DatasetProjectLinksSeq getProjectLinks(const Ice::Current& current = Ice::Current());
      virtual void setProjectLinks(const DatasetProjectLinksSeq& _projectLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isProjectLinksLoaded();
      virtual Ice::Int sizeOfProjectLinks(const Ice::Current& current = Ice::Current());
      virtual DatasetProjectLinksSeq copyProjectLinks(const Ice::Current& current = Ice::Current());
      virtual DatasetProjectLinksSeq::iterator beginProjectLinks();
      virtual DatasetProjectLinksSeq::iterator endProjectLinks();
      virtual void addProjectDatasetLink(const ProjectDatasetLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllProjectDatasetLinkSet(const DatasetProjectLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeProjectDatasetLink(const ProjectDatasetLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllProjectDatasetLinkSet(const DatasetProjectLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearProjectLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadProjectLinks(const DatasetPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getProjectLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual ProjectDatasetLinkPtr linkProject(const ProjectPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addProjectDatasetLinkToBoth(const ProjectDatasetLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
      virtual DatasetProjectLinksSeq findProjectDatasetLink(const ProjectPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkProject(const ProjectPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeProjectDatasetLinkFromBoth(const ProjectDatasetLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual DatasetLinkedProjectSeq linkedProjectList(const Ice::Current& current = Ice::Current());

      //
      //  Dataset.imageLinks
      //
      virtual void unloadImageLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual DatasetImageLinksSeq getImageLinks(const Ice::Current& current = Ice::Current());
      virtual void setImageLinks(const DatasetImageLinksSeq& _imageLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isImageLinksLoaded();
      virtual Ice::Int sizeOfImageLinks(const Ice::Current& current = Ice::Current());
      virtual DatasetImageLinksSeq copyImageLinks(const Ice::Current& current = Ice::Current());
      virtual DatasetImageLinksSeq::iterator beginImageLinks();
      virtual DatasetImageLinksSeq::iterator endImageLinks();
      virtual void addDatasetImageLink(const DatasetImageLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllDatasetImageLinkSet(const DatasetImageLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeDatasetImageLink(const DatasetImageLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllDatasetImageLinkSet(const DatasetImageLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearImageLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadImageLinks(const DatasetPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getImageLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual DatasetImageLinkPtr linkImage(const ImagePtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addDatasetImageLinkToBoth(const DatasetImageLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
      virtual DatasetImageLinksSeq findDatasetImageLink(const ImagePtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkImage(const ImagePtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeDatasetImageLinkFromBoth(const DatasetImageLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual DatasetLinkedImageSeq linkedImageList(const Ice::Current& current = Ice::Current());

      //
      //  Dataset.annotationLinks
      //
      virtual void unloadAnnotationLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual DatasetAnnotationLinksSeq getAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void setAnnotationLinks(const DatasetAnnotationLinksSeq& _annotationLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isAnnotationLinksLoaded();
      virtual Ice::Int sizeOfAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual DatasetAnnotationLinksSeq copyAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual DatasetAnnotationLinksSeq::iterator beginAnnotationLinks();
      virtual DatasetAnnotationLinksSeq::iterator endAnnotationLinks();
      virtual void addDatasetAnnotationLink(const DatasetAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllDatasetAnnotationLinkSet(const DatasetAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeDatasetAnnotationLink(const DatasetAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllDatasetAnnotationLinkSet(const DatasetAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadAnnotationLinks(const DatasetPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getAnnotationLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual DatasetAnnotationLinkPtr linkAnnotation(const AnnotationPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addDatasetAnnotationLinkToBoth(const DatasetAnnotationLinkPtr& link, bool /*unused*/, const Ice::Current& current = Ice::Current());
      virtual DatasetAnnotationLinksSeq findDatasetAnnotationLink(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkAnnotation(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeDatasetAnnotationLinkFromBoth(const DatasetAnnotationLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual DatasetLinkedAnnotationSeq linkedAnnotationList(const Ice::Current& current = Ice::Current());

      //
      //  Dataset.name
      //
      virtual void unloadName();
      virtual omero::RStringPtr getName(const Ice::Current& current = Ice::Current());
      virtual void setName(const omero::RStringPtr& _name, const Ice::Current& current = Ice::Current());

      //
      //  Dataset.description
      //
      virtual void unloadDescription();
      virtual omero::RStringPtr getDescription(const Ice::Current& current = Ice::Current());
      virtual void setDescription(const omero::RStringPtr& _description, const Ice::Current& current = Ice::Current());
 };

}}
#endif // DATASETI_H
