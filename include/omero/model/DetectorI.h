   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef DETECTORI_H
#define DETECTORI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/Detector.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#if ICE_INT_VERSION / 100 >= 304
#   include <Ice/Handle.h>
#else
#   include <IceUtil/Handle.h>
#endif
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT DetectorI;
  }
}
#if ICE_INT_VERSION / 100 >= 304
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::DetectorI*);
}
#endif
namespace omero {
  namespace model {
#if ICE_INT_VERSION / 100 >= 304
  typedef IceInternal::Handle<DetectorI> DetectorIPtr;
#else
  typedef IceUtil::Handle<DetectorI> DetectorIPtr;
#endif
    class OMERO_CLIENT DetectorI : virtual public Detector {
   public:
      static const std::string MANUFACTURER;
      static const std::string MODEL;
      static const std::string LOTNUMBER;
      static const std::string SERIALNUMBER;
      static const std::string VOLTAGE;
      static const std::string GAIN;
      static const std::string OFFSETVALUE;
      static const std::string ZOOM;
      static const std::string AMPLIFICATIONGAIN;
      static const std::string TYPE;
      static const std::string INSTRUMENT;
      static const std::string ANNOTATIONLINKS;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~DetectorI();
    public:
      DetectorI();
      DetectorI(omero::RLongPtr idPtr, bool isLoaded = false);
      DetectorI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  Detector.manufacturer
      //
      virtual void unloadManufacturer();
      virtual omero::RStringPtr getManufacturer(const Ice::Current& current = Ice::Current());
      virtual void setManufacturer(const omero::RStringPtr& _manufacturer, const Ice::Current& current = Ice::Current());

      //
      //  Detector.model
      //
      virtual void unloadModel();
      virtual omero::RStringPtr getModel(const Ice::Current& current = Ice::Current());
      virtual void setModel(const omero::RStringPtr& _model, const Ice::Current& current = Ice::Current());

      //
      //  Detector.lotNumber
      //
      virtual void unloadLotNumber();
      virtual omero::RStringPtr getLotNumber(const Ice::Current& current = Ice::Current());
      virtual void setLotNumber(const omero::RStringPtr& _lotNumber, const Ice::Current& current = Ice::Current());

      //
      //  Detector.serialNumber
      //
      virtual void unloadSerialNumber();
      virtual omero::RStringPtr getSerialNumber(const Ice::Current& current = Ice::Current());
      virtual void setSerialNumber(const omero::RStringPtr& _serialNumber, const Ice::Current& current = Ice::Current());

      //
      //  Detector.voltage
      //
      virtual void unloadVoltage();
      virtual omero::model::ElectricPotentialPtr getVoltage(const Ice::Current& current = Ice::Current());
      virtual void setVoltage(const omero::model::ElectricPotentialPtr& _voltage, const Ice::Current& current = Ice::Current());

      //
      //  Detector.gain
      //
      virtual void unloadGain();
      virtual omero::RDoublePtr getGain(const Ice::Current& current = Ice::Current());
      virtual void setGain(const omero::RDoublePtr& _gain, const Ice::Current& current = Ice::Current());

      //
      //  Detector.offsetValue
      //
      virtual void unloadOffsetValue();
      virtual omero::RDoublePtr getOffsetValue(const Ice::Current& current = Ice::Current());
      virtual void setOffsetValue(const omero::RDoublePtr& _offsetValue, const Ice::Current& current = Ice::Current());

      //
      //  Detector.zoom
      //
      virtual void unloadZoom();
      virtual omero::RDoublePtr getZoom(const Ice::Current& current = Ice::Current());
      virtual void setZoom(const omero::RDoublePtr& _zoom, const Ice::Current& current = Ice::Current());

      //
      //  Detector.amplificationGain
      //
      virtual void unloadAmplificationGain();
      virtual omero::RDoublePtr getAmplificationGain(const Ice::Current& current = Ice::Current());
      virtual void setAmplificationGain(const omero::RDoublePtr& _amplificationGain, const Ice::Current& current = Ice::Current());

      //
      //  Detector.type
      //
      virtual void unloadType();
      virtual omero::model::DetectorTypePtr getType(const Ice::Current& current = Ice::Current());
      virtual void setType(const omero::model::DetectorTypePtr& _type, const Ice::Current& current = Ice::Current());

      //
      //  Detector.instrument
      //
      virtual void unloadInstrument();
      virtual omero::model::InstrumentPtr getInstrument(const Ice::Current& current = Ice::Current());
      virtual void setInstrument(const omero::model::InstrumentPtr& _instrument, const Ice::Current& current = Ice::Current());

      //
      //  Detector.annotationLinks
      //
      virtual void unloadAnnotationLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual DetectorAnnotationLinksSeq getAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void setAnnotationLinks(const DetectorAnnotationLinksSeq& _annotationLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isAnnotationLinksLoaded();
      virtual Ice::Int sizeOfAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual DetectorAnnotationLinksSeq copyAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual DetectorAnnotationLinksSeq::iterator beginAnnotationLinks();
      virtual DetectorAnnotationLinksSeq::iterator endAnnotationLinks();
      virtual void addDetectorAnnotationLink(const DetectorAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllDetectorAnnotationLinkSet(const DetectorAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeDetectorAnnotationLink(const DetectorAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllDetectorAnnotationLinkSet(const DetectorAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadAnnotationLinks(const DetectorPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getAnnotationLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual DetectorAnnotationLinkPtr linkAnnotation(const AnnotationPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addDetectorAnnotationLinkToBoth(const DetectorAnnotationLinkPtr& link, bool /*unused*/, const Ice::Current& current = Ice::Current());
      virtual DetectorAnnotationLinksSeq findDetectorAnnotationLink(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkAnnotation(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeDetectorAnnotationLinkFromBoth(const DetectorAnnotationLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual DetectorLinkedAnnotationSeq linkedAnnotationList(const Ice::Current& current = Ice::Current());
 };

}}
#endif // DETECTORI_H
