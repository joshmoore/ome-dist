   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef DETECTORSETTINGSI_H
#define DETECTORSETTINGSI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/DetectorSettings.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#if ICE_INT_VERSION / 100 >= 304
#   include <Ice/Handle.h>
#else
#   include <IceUtil/Handle.h>
#endif
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT DetectorSettingsI;
  }
}
#if ICE_INT_VERSION / 100 >= 304
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::DetectorSettingsI*);
}
#endif
namespace omero {
  namespace model {
#if ICE_INT_VERSION / 100 >= 304
  typedef IceInternal::Handle<DetectorSettingsI> DetectorSettingsIPtr;
#else
  typedef IceUtil::Handle<DetectorSettingsI> DetectorSettingsIPtr;
#endif
    class OMERO_CLIENT DetectorSettingsI : virtual public DetectorSettings {
   public:
      static const std::string VOLTAGE;
      static const std::string GAIN;
      static const std::string OFFSETVALUE;
      static const std::string READOUTRATE;
      static const std::string BINNING;
      static const std::string INTEGRATION;
      static const std::string ZOOM;
      static const std::string DETECTOR;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool /*unused*/);
      virtual ~DetectorSettingsI();
    public:
      DetectorSettingsI();
      DetectorSettingsI(omero::RLongPtr idPtr, bool isLoaded = false);
      DetectorSettingsI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  DetectorSettings.voltage
      //
      virtual void unloadVoltage();
      virtual omero::model::ElectricPotentialPtr getVoltage(const Ice::Current& current = Ice::Current());
      virtual void setVoltage(const omero::model::ElectricPotentialPtr& _voltage, const Ice::Current& current = Ice::Current());

      //
      //  DetectorSettings.gain
      //
      virtual void unloadGain();
      virtual omero::RDoublePtr getGain(const Ice::Current& current = Ice::Current());
      virtual void setGain(const omero::RDoublePtr& _gain, const Ice::Current& current = Ice::Current());

      //
      //  DetectorSettings.offsetValue
      //
      virtual void unloadOffsetValue();
      virtual omero::RDoublePtr getOffsetValue(const Ice::Current& current = Ice::Current());
      virtual void setOffsetValue(const omero::RDoublePtr& _offsetValue, const Ice::Current& current = Ice::Current());

      //
      //  DetectorSettings.readOutRate
      //
      virtual void unloadReadOutRate();
      virtual omero::model::FrequencyPtr getReadOutRate(const Ice::Current& current = Ice::Current());
      virtual void setReadOutRate(const omero::model::FrequencyPtr& _readOutRate, const Ice::Current& current = Ice::Current());

      //
      //  DetectorSettings.binning
      //
      virtual void unloadBinning();
      virtual omero::model::BinningPtr getBinning(const Ice::Current& current = Ice::Current());
      virtual void setBinning(const omero::model::BinningPtr& _binning, const Ice::Current& current = Ice::Current());

      //
      //  DetectorSettings.integration
      //
      virtual void unloadIntegration();
      virtual omero::RIntPtr getIntegration(const Ice::Current& current = Ice::Current());
      virtual void setIntegration(const omero::RIntPtr& _integration, const Ice::Current& current = Ice::Current());

      //
      //  DetectorSettings.zoom
      //
      virtual void unloadZoom();
      virtual omero::RDoublePtr getZoom(const Ice::Current& current = Ice::Current());
      virtual void setZoom(const omero::RDoublePtr& _zoom, const Ice::Current& current = Ice::Current());

      //
      //  DetectorSettings.detector
      //
      virtual void unloadDetector();
      virtual omero::model::DetectorPtr getDetector(const Ice::Current& current = Ice::Current());
      virtual void setDetector(const omero::model::DetectorPtr& _detector, const Ice::Current& current = Ice::Current());
 };

}}
#endif // DETECTORSETTINGSI_H
