   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef EVENTI_H
#define EVENTI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/Event.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#if ICE_INT_VERSION / 100 >= 304
#   include <Ice/Handle.h>
#else
#   include <IceUtil/Handle.h>
#endif
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT EventI;
  }
}
#if ICE_INT_VERSION / 100 >= 304
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::EventI*);
}
#endif
namespace omero {
  namespace model {
#if ICE_INT_VERSION / 100 >= 304
  typedef IceInternal::Handle<EventI> EventIPtr;
#else
  typedef IceUtil::Handle<EventI> EventIPtr;
#endif
    class OMERO_CLIENT EventI : virtual public Event {
   public:
      static const std::string STATUS;
      static const std::string TIME;
      static const std::string EXPERIMENTER;
      static const std::string EXPERIMENTERGROUP;
      static const std::string TYPE;
      static const std::string CONTAININGEVENT;
      static const std::string LOGS;
      static const std::string SESSION;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~EventI();
    public:
      EventI();
      EventI(omero::RLongPtr idPtr, bool isLoaded = false);
      EventI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );

      //
      //  Event.status
      //
      virtual void unloadStatus();
      virtual omero::RStringPtr getStatus(const Ice::Current& current = Ice::Current());
      virtual void setStatus(const omero::RStringPtr& _status, const Ice::Current& current = Ice::Current());

      //
      //  Event.time
      //
      virtual void unloadTime();
      virtual omero::RTimePtr getTime(const Ice::Current& current = Ice::Current());
      virtual void setTime(const omero::RTimePtr& _time, const Ice::Current& current = Ice::Current());

      //
      //  Event.experimenter
      //
      virtual void unloadExperimenter();
      virtual omero::model::ExperimenterPtr getExperimenter(const Ice::Current& current = Ice::Current());
      virtual void setExperimenter(const omero::model::ExperimenterPtr& _experimenter, const Ice::Current& current = Ice::Current());

      //
      //  Event.experimenterGroup
      //
      virtual void unloadExperimenterGroup();
      virtual omero::model::ExperimenterGroupPtr getExperimenterGroup(const Ice::Current& current = Ice::Current());
      virtual void setExperimenterGroup(const omero::model::ExperimenterGroupPtr& _experimenterGroup, const Ice::Current& current = Ice::Current());

      //
      //  Event.type
      //
      virtual void unloadType();
      virtual omero::model::EventTypePtr getType(const Ice::Current& current = Ice::Current());
      virtual void setType(const omero::model::EventTypePtr& _type, const Ice::Current& current = Ice::Current());

      //
      //  Event.containingEvent
      //
      virtual void unloadContainingEvent();
      virtual omero::model::EventPtr getContainingEvent(const Ice::Current& current = Ice::Current());
      virtual void setContainingEvent(const omero::model::EventPtr& _containingEvent, const Ice::Current& current = Ice::Current());

      //
      //  Event.logs
      //
      virtual void unloadLogs(const Ice::Current& current = Ice::Current());
    protected:
      virtual EventLogsSeq getLogs(const Ice::Current& current = Ice::Current());
      virtual void setLogs(const EventLogsSeq& _logs, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isLogsLoaded();
      virtual Ice::Int sizeOfLogs(const Ice::Current& current = Ice::Current());
      virtual EventLogsSeq copyLogs(const Ice::Current& current = Ice::Current());
      virtual EventLogsSeq::iterator beginLogs();
      virtual EventLogsSeq::iterator endLogs();
      virtual void addEventLog(const EventLogPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllEventLogSet(const EventLogsSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeEventLog(const EventLogPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllEventLogSet(const EventLogsSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearLogs(const Ice::Current& current = Ice::Current());
      virtual void reloadLogs(const EventPtr& toCopy, const Ice::Current& current = Ice::Current());

      //
      //  Event.session
      //
      virtual void unloadSession();
      virtual omero::model::SessionPtr getSession(const Ice::Current& current = Ice::Current());
      virtual void setSession(const omero::model::SessionPtr& _session, const Ice::Current& current = Ice::Current());
 };

}}
#endif // EVENTI_H
