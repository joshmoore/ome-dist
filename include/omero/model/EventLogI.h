   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef EVENTLOGI_H
#define EVENTLOGI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/EventLog.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT EventLogI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::EventLogI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<EventLogI> EventLogIPtr;
    class OMERO_CLIENT EventLogI : virtual public EventLog {
   public:
      static const std::string ENTITYID;
      static const std::string ENTITYTYPE;
      static const std::string ACTION;
      static const std::string EVENT;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool /*unused*/);
      virtual ~EventLogI();
    public:
      EventLogI();
      EventLogI(omero::RLongPtr idPtr, bool isLoaded = false);
      EventLogI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );

      //
      //  EventLog.entityId
      //
      virtual void unloadEntityId();
      virtual omero::RLongPtr getEntityId(const Ice::Current& current = Ice::Current());
      virtual void setEntityId(const omero::RLongPtr& _entityId, const Ice::Current& current = Ice::Current());

      //
      //  EventLog.entityType
      //
      virtual void unloadEntityType();
      virtual omero::RStringPtr getEntityType(const Ice::Current& current = Ice::Current());
      virtual void setEntityType(const omero::RStringPtr& _entityType, const Ice::Current& current = Ice::Current());

      //
      //  EventLog.action
      //
      virtual void unloadAction();
      virtual omero::RStringPtr getAction(const Ice::Current& current = Ice::Current());
      virtual void setAction(const omero::RStringPtr& _action, const Ice::Current& current = Ice::Current());

      //
      //  EventLog.event
      //
      virtual void unloadEvent();
      virtual omero::model::EventPtr getEvent(const Ice::Current& current = Ice::Current());
      virtual void setEvent(const omero::model::EventPtr& _event, const Ice::Current& current = Ice::Current());
 };

}}
#endif // EVENTLOGI_H
