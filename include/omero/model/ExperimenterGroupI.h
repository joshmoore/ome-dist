   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef EXPERIMENTERGROUPI_H
#define EXPERIMENTERGROUPI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/ExperimenterGroup.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT ExperimenterGroupI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::ExperimenterGroupI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<ExperimenterGroupI> ExperimenterGroupIPtr;
    class OMERO_CLIENT ExperimenterGroupI : virtual public ExperimenterGroup {
   public:
      static const std::string NAME;
      static const std::string LDAP;
      static const std::string GROUPEXPERIMENTERMAP;
      static const std::string CONFIG;
      static const std::string ANNOTATIONLINKS;
      static const std::string DESCRIPTION;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~ExperimenterGroupI();
    public:
      ExperimenterGroupI();
      ExperimenterGroupI(omero::RLongPtr idPtr, bool isLoaded = false);
      ExperimenterGroupI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  ExperimenterGroup.name
      //
      virtual void unloadName();
      virtual omero::RStringPtr getName(const Ice::Current& current = Ice::Current());
      virtual void setName(const omero::RStringPtr& _name, const Ice::Current& current = Ice::Current());

      //
      //  ExperimenterGroup.ldap
      //
      virtual void unloadLdap();
      virtual omero::RBoolPtr getLdap(const Ice::Current& current = Ice::Current());
      virtual void setLdap(const omero::RBoolPtr& _ldap, const Ice::Current& current = Ice::Current());

      //
      //  ExperimenterGroup.groupExperimenterMap
      //
      virtual void unloadGroupExperimenterMap(const Ice::Current& current = Ice::Current());
    protected:
      virtual ExperimenterGroupGroupExperimenterMapSeq getGroupExperimenterMap(const Ice::Current& current = Ice::Current());
      virtual void setGroupExperimenterMap(const ExperimenterGroupGroupExperimenterMapSeq& _groupExperimenterMap, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isGroupExperimenterMapLoaded();
      virtual Ice::Int sizeOfGroupExperimenterMap(const Ice::Current& current = Ice::Current());
      virtual ExperimenterGroupGroupExperimenterMapSeq copyGroupExperimenterMap(const Ice::Current& current = Ice::Current());
      virtual ExperimenterGroupGroupExperimenterMapSeq::iterator beginGroupExperimenterMap();
      virtual ExperimenterGroupGroupExperimenterMapSeq::iterator endGroupExperimenterMap();
      virtual void addGroupExperimenterMap(const GroupExperimenterMapPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllGroupExperimenterMapSet(const ExperimenterGroupGroupExperimenterMapSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeGroupExperimenterMap(const GroupExperimenterMapPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllGroupExperimenterMapSet(const ExperimenterGroupGroupExperimenterMapSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearGroupExperimenterMap(const Ice::Current& current = Ice::Current());
      virtual void reloadGroupExperimenterMap(const ExperimenterGroupPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual GroupExperimenterMapPtr linkExperimenter(const ExperimenterPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addGroupExperimenterMapToBoth(const GroupExperimenterMapPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
      virtual ExperimenterGroupGroupExperimenterMapSeq findGroupExperimenterMap(const ExperimenterPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkExperimenter(const ExperimenterPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeGroupExperimenterMapFromBoth(const GroupExperimenterMapPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual ExperimenterGroupLinkedExperimenterSeq linkedExperimenterList(const Ice::Current& current = Ice::Current());

      //
      //  ExperimenterGroup.config
      //
      virtual void unloadConfig();
      virtual omero::api::NamedValueList getConfig(const Ice::Current& current = Ice::Current());
      virtual void setConfig(const omero::api::NamedValueList& _config, const Ice::Current& current = Ice::Current());
      virtual omero::api::StringStringMap getConfigAsMap(const Ice::Current& current = Ice::Current());

      //
      //  ExperimenterGroup.annotationLinks
      //
      virtual void unloadAnnotationLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual ExperimenterGroupAnnotationLinksSeq getAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void setAnnotationLinks(const ExperimenterGroupAnnotationLinksSeq& _annotationLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isAnnotationLinksLoaded();
      virtual Ice::Int sizeOfAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual ExperimenterGroupAnnotationLinksSeq copyAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual ExperimenterGroupAnnotationLinksSeq::iterator beginAnnotationLinks();
      virtual ExperimenterGroupAnnotationLinksSeq::iterator endAnnotationLinks();
      virtual void addExperimenterGroupAnnotationLink(const ExperimenterGroupAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllExperimenterGroupAnnotationLinkSet(const ExperimenterGroupAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeExperimenterGroupAnnotationLink(const ExperimenterGroupAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllExperimenterGroupAnnotationLinkSet(const ExperimenterGroupAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadAnnotationLinks(const ExperimenterGroupPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getAnnotationLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual ExperimenterGroupAnnotationLinkPtr linkAnnotation(const AnnotationPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addExperimenterGroupAnnotationLinkToBoth(const ExperimenterGroupAnnotationLinkPtr& link, bool /*unused*/, const Ice::Current& current = Ice::Current());
      virtual ExperimenterGroupAnnotationLinksSeq findExperimenterGroupAnnotationLink(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkAnnotation(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeExperimenterGroupAnnotationLinkFromBoth(const ExperimenterGroupAnnotationLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual ExperimenterGroupLinkedAnnotationSeq linkedAnnotationList(const Ice::Current& current = Ice::Current());

      //
      //  ExperimenterGroup.description
      //
      virtual void unloadDescription();
      virtual omero::RStringPtr getDescription(const Ice::Current& current = Ice::Current());
      virtual void setDescription(const omero::RStringPtr& _description, const Ice::Current& current = Ice::Current());
 };

}}
#endif // EXPERIMENTERGROUPI_H
