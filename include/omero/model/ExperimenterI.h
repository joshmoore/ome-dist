   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef EXPERIMENTERI_H
#define EXPERIMENTERI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/Experimenter.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#if ICE_INT_VERSION / 100 >= 304
#   include <Ice/Handle.h>
#else
#   include <IceUtil/Handle.h>
#endif
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT ExperimenterI;
  }
}
#if ICE_INT_VERSION / 100 >= 304
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::ExperimenterI*);
}
#endif
namespace omero {
  namespace model {
#if ICE_INT_VERSION / 100 >= 304
  typedef IceInternal::Handle<ExperimenterI> ExperimenterIPtr;
#else
  typedef IceUtil::Handle<ExperimenterI> ExperimenterIPtr;
#endif
    class OMERO_CLIENT ExperimenterI : virtual public Experimenter {
   public:
      static const std::string GROUPEXPERIMENTERMAP;
      static const std::string OMENAME;
      static const std::string FIRSTNAME;
      static const std::string MIDDLENAME;
      static const std::string LASTNAME;
      static const std::string INSTITUTION;
      static const std::string LDAP;
      static const std::string EMAIL;
      static const std::string ANNOTATIONLINKS;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~ExperimenterI();
    public:
      ExperimenterI();
      ExperimenterI(omero::RLongPtr idPtr, bool isLoaded = false);
      ExperimenterI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  Experimenter.groupExperimenterMap
      //
      virtual void unloadGroupExperimenterMap(const Ice::Current& current = Ice::Current());
    protected:
      virtual ExperimenterGroupExperimenterMapSeq getGroupExperimenterMap(const Ice::Current& current = Ice::Current());
      virtual void setGroupExperimenterMap(const ExperimenterGroupExperimenterMapSeq& _groupExperimenterMap, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isGroupExperimenterMapLoaded();
      virtual Ice::Int sizeOfGroupExperimenterMap(const Ice::Current& current = Ice::Current());
      virtual ExperimenterGroupExperimenterMapSeq copyGroupExperimenterMap(const Ice::Current& current = Ice::Current());
      virtual ExperimenterGroupExperimenterMapSeq::iterator beginGroupExperimenterMap();
      virtual ExperimenterGroupExperimenterMapSeq::iterator endGroupExperimenterMap();
      virtual void addGroupExperimenterMap(const GroupExperimenterMapPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllGroupExperimenterMapSet(const ExperimenterGroupExperimenterMapSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeGroupExperimenterMap(const GroupExperimenterMapPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllGroupExperimenterMapSet(const ExperimenterGroupExperimenterMapSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearGroupExperimenterMap(const Ice::Current& current = Ice::Current());
      virtual void reloadGroupExperimenterMap(const ExperimenterPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual GroupExperimenterMapPtr getGroupExperimenterMap(int index, const Ice::Current& current = Ice::Current());
      virtual GroupExperimenterMapPtr setGroupExperimenterMap(int index, const GroupExperimenterMapPtr& element, const Ice::Current& current = Ice::Current());
      virtual GroupExperimenterMapPtr getPrimaryGroupExperimenterMap(const Ice::Current& current = Ice::Current());
      virtual GroupExperimenterMapPtr setPrimaryGroupExperimenterMap(const GroupExperimenterMapPtr& element, const Ice::Current& current = Ice::Current());
      virtual GroupExperimenterMapPtr linkExperimenterGroup(const ExperimenterGroupPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addGroupExperimenterMapToBoth(const GroupExperimenterMapPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
      virtual ExperimenterGroupExperimenterMapSeq findGroupExperimenterMap(const ExperimenterGroupPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkExperimenterGroup(const ExperimenterGroupPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeGroupExperimenterMapFromBoth(const GroupExperimenterMapPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual ExperimenterLinkedExperimenterGroupSeq linkedExperimenterGroupList(const Ice::Current& current = Ice::Current());

      //
      //  Experimenter.omeName
      //
      virtual void unloadOmeName();
      virtual omero::RStringPtr getOmeName(const Ice::Current& current = Ice::Current());
      virtual void setOmeName(const omero::RStringPtr& _omeName, const Ice::Current& current = Ice::Current());

      //
      //  Experimenter.firstName
      //
      virtual void unloadFirstName();
      virtual omero::RStringPtr getFirstName(const Ice::Current& current = Ice::Current());
      virtual void setFirstName(const omero::RStringPtr& _firstName, const Ice::Current& current = Ice::Current());

      //
      //  Experimenter.middleName
      //
      virtual void unloadMiddleName();
      virtual omero::RStringPtr getMiddleName(const Ice::Current& current = Ice::Current());
      virtual void setMiddleName(const omero::RStringPtr& _middleName, const Ice::Current& current = Ice::Current());

      //
      //  Experimenter.lastName
      //
      virtual void unloadLastName();
      virtual omero::RStringPtr getLastName(const Ice::Current& current = Ice::Current());
      virtual void setLastName(const omero::RStringPtr& _lastName, const Ice::Current& current = Ice::Current());

      //
      //  Experimenter.institution
      //
      virtual void unloadInstitution();
      virtual omero::RStringPtr getInstitution(const Ice::Current& current = Ice::Current());
      virtual void setInstitution(const omero::RStringPtr& _institution, const Ice::Current& current = Ice::Current());

      //
      //  Experimenter.ldap
      //
      virtual void unloadLdap();
      virtual omero::RBoolPtr getLdap(const Ice::Current& current = Ice::Current());
      virtual void setLdap(const omero::RBoolPtr& _ldap, const Ice::Current& current = Ice::Current());

      //
      //  Experimenter.email
      //
      virtual void unloadEmail();
      virtual omero::RStringPtr getEmail(const Ice::Current& current = Ice::Current());
      virtual void setEmail(const omero::RStringPtr& _email, const Ice::Current& current = Ice::Current());

      //
      //  Experimenter.annotationLinks
      //
      virtual void unloadAnnotationLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual ExperimenterAnnotationLinksSeq getAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void setAnnotationLinks(const ExperimenterAnnotationLinksSeq& _annotationLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isAnnotationLinksLoaded();
      virtual Ice::Int sizeOfAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual ExperimenterAnnotationLinksSeq copyAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual ExperimenterAnnotationLinksSeq::iterator beginAnnotationLinks();
      virtual ExperimenterAnnotationLinksSeq::iterator endAnnotationLinks();
      virtual void addExperimenterAnnotationLink(const ExperimenterAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllExperimenterAnnotationLinkSet(const ExperimenterAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeExperimenterAnnotationLink(const ExperimenterAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllExperimenterAnnotationLinkSet(const ExperimenterAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadAnnotationLinks(const ExperimenterPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getAnnotationLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual ExperimenterAnnotationLinkPtr linkAnnotation(const AnnotationPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addExperimenterAnnotationLinkToBoth(const ExperimenterAnnotationLinkPtr& link, bool /*unused*/, const Ice::Current& current = Ice::Current());
      virtual ExperimenterAnnotationLinksSeq findExperimenterAnnotationLink(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkAnnotation(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeExperimenterAnnotationLinkFromBoth(const ExperimenterAnnotationLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual ExperimenterLinkedAnnotationSeq linkedAnnotationList(const Ice::Current& current = Ice::Current());
 };

}}
#endif // EXPERIMENTERI_H
