   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef FILESETENTRYI_H
#define FILESETENTRYI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/FilesetEntry.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT FilesetEntryI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::FilesetEntryI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<FilesetEntryI> FilesetEntryIPtr;
    class OMERO_CLIENT FilesetEntryI : virtual public FilesetEntry {
   public:
      static const std::string FILESET;
      static const std::string ORIGINALFILE;
      static const std::string CLIENTPATH;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool /*unused*/);
      virtual ~FilesetEntryI();
    public:
      FilesetEntryI();
      FilesetEntryI(omero::RLongPtr idPtr, bool isLoaded = false);
      FilesetEntryI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  FilesetEntry.fileset
      //
      virtual void unloadFileset();
      virtual omero::model::FilesetPtr getFileset(const Ice::Current& current = Ice::Current());
      virtual void setFileset(const omero::model::FilesetPtr& _fileset, const Ice::Current& current = Ice::Current());

      //
      //  FilesetEntry.originalFile
      //
      virtual void unloadOriginalFile();
      virtual omero::model::OriginalFilePtr getOriginalFile(const Ice::Current& current = Ice::Current());
      virtual void setOriginalFile(const omero::model::OriginalFilePtr& _originalFile, const Ice::Current& current = Ice::Current());

      //
      //  FilesetEntry.clientPath
      //
      virtual void unloadClientPath();
      virtual omero::RStringPtr getClientPath(const Ice::Current& current = Ice::Current());
      virtual void setClientPath(const omero::RStringPtr& _clientPath, const Ice::Current& current = Ice::Current());
 };

}}
#endif // FILESETENTRYI_H
