   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.ice for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef FORMAT_ICE
#define FORMAT_ICE
#include <omero/model/IObject.ice>
#include <omero/RTypes.ice>
#include <omero/model/RTypes.ice>
#include <omero/System.ice>
#include <omero/Collections.ice>
module omero {
  module model {

    module enums {
        const string FormatPNG = "PNG";
        const string FormatCompanionPNG = "Companion/PNG";
        const string FormatJPEG = "JPEG";
        const string FormatCompanionJPEG = "Companion/JPEG";
        const string FormatPGM = "PGM";
        const string FormatCompanionPGM = "Companion/PGM";
        const string FormatFits = "Fits";
        const string FormatCompanionFits = "Companion/Fits";
        const string FormatGIF = "GIF";
        const string FormatCompanionGIF = "Companion/GIF";
        const string FormatBMP = "BMP";
        const string FormatCompanionBMP = "Companion/BMP";
        const string FormatDicom = "Dicom";
        const string FormatCompanionDicom = "Companion/Dicom";
        const string FormatBioRad = "BioRad";
        const string FormatCompanionBioRad = "Companion/BioRad";
        const string FormatIPLab = "IPLab";
        const string FormatCompanionIPLab = "Companion/IPLab";
        const string FormatDeltavision = "Deltavision";
        const string FormatCompanionDeltavision = "Companion/Deltavision";
        const string FormatMRC = "MRC";
        const string FormatCompanionMRC = "Companion/MRC";
        const string FormatGatan = "Gatan";
        const string FormatCompanionGatan = "Companion/Gatan";
        const string FormatImaris = "Imaris";
        const string FormatCompanionImaris = "Companion/Imaris";
        const string FormatOpenlabRaw = "OpenlabRaw";
        const string FormatCompanionOpenlabRaw = "Companion/OpenlabRaw";
        const string FormatOMEXML = "OMEXML";
        const string FormatCompanionOMEXML = "Companion/OMEXML";
        const string FormatLIF = "LIF";
        const string FormatCompanionLIF = "Companion/LIF";
        const string FormatAVI = "AVI";
        const string FormatCompanionAVI = "Companion/AVI";
        const string FormatQT = "QT";
        const string FormatCompanionQT = "Companion/QT";
        const string FormatPict = "Pict";
        const string FormatCompanionPict = "Companion/Pict";
        const string FormatSDT = "SDT";
        const string FormatCompanionSDT = "Companion/SDT";
        const string FormatEPS = "EPS";
        const string FormatCompanionEPS = "Companion/EPS";
        const string FormatSlidebook = "Slidebook";
        const string FormatCompanionSlidebook = "Companion/Slidebook";
        const string FormatAlicona = "Alicona";
        const string FormatCompanionAlicona = "Companion/Alicona";
        const string FormatMNG = "MNG";
        const string FormatCompanionMNG = "Companion/MNG";
        const string FormatNRRD = "NRRD";
        const string FormatCompanionNRRD = "Companion/NRRD";
        const string FormatKhoros = "Khoros";
        const string FormatCompanionKhoros = "Companion/Khoros";
        const string FormatVisitech = "Visitech";
        const string FormatCompanionVisitech = "Companion/Visitech";
        const string FormatLIM = "LIM";
        const string FormatCompanionLIM = "Companion/LIM";
        const string FormatPSD = "PSD";
        const string FormatCompanionPSD = "Companion/PSD";
        const string FormatInCell = "InCell";
        const string FormatCompanionInCell = "Companion/InCell";
        const string FormatICS = "ICS";
        const string FormatCompanionICS = "Companion/ICS";
        const string FormatPerkinElmer = "PerkinElmer";
        const string FormatCompanionPerkinElmer = "Companion/PerkinElmer";
        const string FormatTCS = "TCS";
        const string FormatCompanionTCS = "Companion/TCS";
        const string FormatFV1000 = "FV1000";
        const string FormatCompanionFV1000 = "Companion/FV1000";
        const string FormatZeissZVI = "ZeissZVI";
        const string FormatCompanionZeissZVI = "Companion/ZeissZVI";
        const string FormatIPW = "IPW";
        const string FormatCompanionIPW = "Companion/IPW";
        const string FormatLegacyND2 = "LegacyND2";
        const string FormatCompanionLegacyND2 = "Companion/LegacyND2";
        const string FormatND2 = "ND2";
        const string FormatCompanionND2 = "Companion/ND2";
        const string FormatPCI = "PCI";
        const string FormatCompanionPCI = "Companion/PCI";
        const string FormatImarisHDF = "ImarisHDF";
        const string FormatCompanionImarisHDF = "Companion/ImarisHDF";
        const string FormatMetamorph = "Metamorph";
        const string FormatCompanionMetamorph = "Companion/Metamorph";
        const string FormatZeissLSM = "ZeissLSM";
        const string FormatCompanionZeissLSM = "Companion/ZeissLSM";
        const string FormatSEQ = "SEQ";
        const string FormatCompanionSEQ = "Companion/SEQ";
        const string FormatGel = "Gel";
        const string FormatCompanionGel = "Companion/Gel";
        const string FormatImarisTiff = "ImarisTiff";
        const string FormatCompanionImarisTiff = "Companion/ImarisTiff";
        const string FormatFlex = "Flex";
        const string FormatCompanionFlex = "Companion/Flex";
        const string FormatSVS = "SVS";
        const string FormatCompanionSVS = "Companion/SVS";
        const string FormatLeica = "Leica";
        const string FormatCompanionLeica = "Companion/Leica";
        const string FormatNikon = "Nikon";
        const string FormatCompanionNikon = "Companion/Nikon";
        const string FormatFluoview = "Fluoview";
        const string FormatCompanionFluoview = "Companion/Fluoview";
        const string FormatPrairie = "Prairie";
        const string FormatCompanionPrairie = "Companion/Prairie";
        const string FormatMicromanager = "Micromanager";
        const string FormatCompanionMicromanager = "Companion/Micromanager";
        const string FormatImprovisionTiff = "ImprovisionTiff";
        const string FormatCompanionImprovisionTiff = "Companion/ImprovisionTiff";
        const string FormatOMETiff = "OMETiff";
        const string FormatCompanionOMETiff = "Companion/OMETiff";
        const string FormatMetamorphTiff = "MetamorphTiff";
        const string FormatCompanionMetamorphTiff = "Companion/MetamorphTiff";
        const string FormatTiff = "Tiff";
        const string FormatCompanionTiff = "Companion/Tiff";
        const string FormatOpenlab = "Openlab";
        const string FormatCompanionOpenlab = "Companion/Openlab";
        const string FormatMIAS = "MIAS";
        const string FormatCompanionMIAS = "Companion/MIAS";
    };

    class Details;
    ["protected"] class Format
    extends omero::model::IObject
    {
      omero::RString value;
      omero::RString getValue();
      void setValue(omero::RString theValue);
    };
  };
};
#endif // FORMAT_ICE
