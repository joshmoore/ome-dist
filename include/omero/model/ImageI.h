   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef IMAGEI_H
#define IMAGEI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/Image.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT ImageI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::ImageI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<ImageI> ImageIPtr;
    class OMERO_CLIENT ImageI : virtual public Image {
   public:
      static const std::string SERIES;
      static const std::string ACQUISITIONDATE;
      static const std::string ARCHIVED;
      static const std::string PARTIAL;
      static const std::string FORMAT;
      static const std::string IMAGINGENVIRONMENT;
      static const std::string OBJECTIVESETTINGS;
      static const std::string INSTRUMENT;
      static const std::string STAGELABEL;
      static const std::string EXPERIMENT;
      static const std::string PIXELS;
      static const std::string WELLSAMPLES;
      static const std::string ROIS;
      static const std::string DATASETLINKS;
      static const std::string FILESET;
      static const std::string ANNOTATIONLINKS;
      static const std::string NAME;
      static const std::string DESCRIPTION;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~ImageI();
    public:
      ImageI();
      ImageI(omero::RLongPtr idPtr, bool isLoaded = false);
      ImageI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  Image.series
      //
      virtual void unloadSeries();
      virtual omero::RIntPtr getSeries(const Ice::Current& current = Ice::Current());
      virtual void setSeries(const omero::RIntPtr& _series, const Ice::Current& current = Ice::Current());

      //
      //  Image.acquisitionDate
      //
      virtual void unloadAcquisitionDate();
      virtual omero::RTimePtr getAcquisitionDate(const Ice::Current& current = Ice::Current());
      virtual void setAcquisitionDate(const omero::RTimePtr& _acquisitionDate, const Ice::Current& current = Ice::Current());

      //
      //  Image.archived
      //
      virtual void unloadArchived();
      virtual omero::RBoolPtr getArchived(const Ice::Current& current = Ice::Current());
      virtual void setArchived(const omero::RBoolPtr& _archived, const Ice::Current& current = Ice::Current());

      //
      //  Image.partial
      //
      virtual void unloadPartial();
      virtual omero::RBoolPtr getPartial(const Ice::Current& current = Ice::Current());
      virtual void setPartial(const omero::RBoolPtr& _partial, const Ice::Current& current = Ice::Current());

      //
      //  Image.format
      //
      virtual void unloadFormat();
      virtual omero::model::FormatPtr getFormat(const Ice::Current& current = Ice::Current());
      virtual void setFormat(const omero::model::FormatPtr& _format, const Ice::Current& current = Ice::Current());

      //
      //  Image.imagingEnvironment
      //
      virtual void unloadImagingEnvironment();
      virtual omero::model::ImagingEnvironmentPtr getImagingEnvironment(const Ice::Current& current = Ice::Current());
      virtual void setImagingEnvironment(const omero::model::ImagingEnvironmentPtr& _imagingEnvironment, const Ice::Current& current = Ice::Current());

      //
      //  Image.objectiveSettings
      //
      virtual void unloadObjectiveSettings();
      virtual omero::model::ObjectiveSettingsPtr getObjectiveSettings(const Ice::Current& current = Ice::Current());
      virtual void setObjectiveSettings(const omero::model::ObjectiveSettingsPtr& _objectiveSettings, const Ice::Current& current = Ice::Current());

      //
      //  Image.instrument
      //
      virtual void unloadInstrument();
      virtual omero::model::InstrumentPtr getInstrument(const Ice::Current& current = Ice::Current());
      virtual void setInstrument(const omero::model::InstrumentPtr& _instrument, const Ice::Current& current = Ice::Current());

      //
      //  Image.stageLabel
      //
      virtual void unloadStageLabel();
      virtual omero::model::StageLabelPtr getStageLabel(const Ice::Current& current = Ice::Current());
      virtual void setStageLabel(const omero::model::StageLabelPtr& _stageLabel, const Ice::Current& current = Ice::Current());

      //
      //  Image.experiment
      //
      virtual void unloadExperiment();
      virtual omero::model::ExperimentPtr getExperiment(const Ice::Current& current = Ice::Current());
      virtual void setExperiment(const omero::model::ExperimentPtr& _experiment, const Ice::Current& current = Ice::Current());

      //
      //  Image.pixels
      //
      virtual void unloadPixels(const Ice::Current& current = Ice::Current());
    protected:
      virtual ImagePixelsSeq getPixels(const Ice::Current& current = Ice::Current());
      virtual void setPixels(const ImagePixelsSeq& _pixels, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isPixelsLoaded();
      virtual Ice::Int sizeOfPixels(const Ice::Current& current = Ice::Current());
      virtual ImagePixelsSeq copyPixels(const Ice::Current& current = Ice::Current());
      virtual ImagePixelsSeq::iterator beginPixels();
      virtual ImagePixelsSeq::iterator endPixels();
      virtual void addPixels(const PixelsPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllPixelsSet(const ImagePixelsSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removePixels(const PixelsPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllPixelsSet(const ImagePixelsSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearPixels(const Ice::Current& current = Ice::Current());
      virtual void reloadPixels(const ImagePtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual PixelsPtr getPixels(int index, const Ice::Current& current = Ice::Current());
      virtual PixelsPtr setPixels(int index, const PixelsPtr& element, const Ice::Current& current = Ice::Current());
      virtual PixelsPtr getPrimaryPixels(const Ice::Current& current = Ice::Current());
      virtual PixelsPtr setPrimaryPixels(const PixelsPtr& element, const Ice::Current& current = Ice::Current());

      //
      //  Image.wellSamples
      //
      virtual void unloadWellSamples(const Ice::Current& current = Ice::Current());
    protected:
      virtual ImageWellSamplesSeq getWellSamples(const Ice::Current& current = Ice::Current());
      virtual void setWellSamples(const ImageWellSamplesSeq& _wellSamples, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isWellSamplesLoaded();
      virtual Ice::Int sizeOfWellSamples(const Ice::Current& current = Ice::Current());
      virtual ImageWellSamplesSeq copyWellSamples(const Ice::Current& current = Ice::Current());
      virtual ImageWellSamplesSeq::iterator beginWellSamples();
      virtual ImageWellSamplesSeq::iterator endWellSamples();
      virtual void addWellSample(const WellSamplePtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllWellSampleSet(const ImageWellSamplesSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeWellSample(const WellSamplePtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllWellSampleSet(const ImageWellSamplesSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearWellSamples(const Ice::Current& current = Ice::Current());
      virtual void reloadWellSamples(const ImagePtr& toCopy, const Ice::Current& current = Ice::Current());

      //
      //  Image.rois
      //
      virtual void unloadRois(const Ice::Current& current = Ice::Current());
    protected:
      virtual ImageRoisSeq getRois(const Ice::Current& current = Ice::Current());
      virtual void setRois(const ImageRoisSeq& _rois, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isRoisLoaded();
      virtual Ice::Int sizeOfRois(const Ice::Current& current = Ice::Current());
      virtual ImageRoisSeq copyRois(const Ice::Current& current = Ice::Current());
      virtual ImageRoisSeq::iterator beginRois();
      virtual ImageRoisSeq::iterator endRois();
      virtual void addRoi(const RoiPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllRoiSet(const ImageRoisSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeRoi(const RoiPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllRoiSet(const ImageRoisSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearRois(const Ice::Current& current = Ice::Current());
      virtual void reloadRois(const ImagePtr& toCopy, const Ice::Current& current = Ice::Current());

      //
      //  Image.datasetLinks
      //
      virtual void unloadDatasetLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual ImageDatasetLinksSeq getDatasetLinks(const Ice::Current& current = Ice::Current());
      virtual void setDatasetLinks(const ImageDatasetLinksSeq& _datasetLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isDatasetLinksLoaded();
      virtual Ice::Int sizeOfDatasetLinks(const Ice::Current& current = Ice::Current());
      virtual ImageDatasetLinksSeq copyDatasetLinks(const Ice::Current& current = Ice::Current());
      virtual ImageDatasetLinksSeq::iterator beginDatasetLinks();
      virtual ImageDatasetLinksSeq::iterator endDatasetLinks();
      virtual void addDatasetImageLink(const DatasetImageLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllDatasetImageLinkSet(const ImageDatasetLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeDatasetImageLink(const DatasetImageLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllDatasetImageLinkSet(const ImageDatasetLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearDatasetLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadDatasetLinks(const ImagePtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getDatasetLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual DatasetImageLinkPtr linkDataset(const DatasetPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addDatasetImageLinkToBoth(const DatasetImageLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
      virtual ImageDatasetLinksSeq findDatasetImageLink(const DatasetPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkDataset(const DatasetPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeDatasetImageLinkFromBoth(const DatasetImageLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual ImageLinkedDatasetSeq linkedDatasetList(const Ice::Current& current = Ice::Current());

      //
      //  Image.fileset
      //
      virtual void unloadFileset();
      virtual omero::model::FilesetPtr getFileset(const Ice::Current& current = Ice::Current());
      virtual void setFileset(const omero::model::FilesetPtr& _fileset, const Ice::Current& current = Ice::Current());

      //
      //  Image.annotationLinks
      //
      virtual void unloadAnnotationLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual ImageAnnotationLinksSeq getAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void setAnnotationLinks(const ImageAnnotationLinksSeq& _annotationLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isAnnotationLinksLoaded();
      virtual Ice::Int sizeOfAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual ImageAnnotationLinksSeq copyAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual ImageAnnotationLinksSeq::iterator beginAnnotationLinks();
      virtual ImageAnnotationLinksSeq::iterator endAnnotationLinks();
      virtual void addImageAnnotationLink(const ImageAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllImageAnnotationLinkSet(const ImageAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeImageAnnotationLink(const ImageAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllImageAnnotationLinkSet(const ImageAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadAnnotationLinks(const ImagePtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getAnnotationLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual ImageAnnotationLinkPtr linkAnnotation(const AnnotationPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addImageAnnotationLinkToBoth(const ImageAnnotationLinkPtr& link, bool /*unused*/, const Ice::Current& current = Ice::Current());
      virtual ImageAnnotationLinksSeq findImageAnnotationLink(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkAnnotation(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeImageAnnotationLinkFromBoth(const ImageAnnotationLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual ImageLinkedAnnotationSeq linkedAnnotationList(const Ice::Current& current = Ice::Current());

      //
      //  Image.name
      //
      virtual void unloadName();
      virtual omero::RStringPtr getName(const Ice::Current& current = Ice::Current());
      virtual void setName(const omero::RStringPtr& _name, const Ice::Current& current = Ice::Current());

      //
      //  Image.description
      //
      virtual void unloadDescription();
      virtual omero::RStringPtr getDescription(const Ice::Current& current = Ice::Current());
      virtual void setDescription(const omero::RStringPtr& _description, const Ice::Current& current = Ice::Current());
 };

}}
#endif // IMAGEI_H
