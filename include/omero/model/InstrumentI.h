   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef INSTRUMENTI_H
#define INSTRUMENTI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/Instrument.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT InstrumentI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::InstrumentI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<InstrumentI> InstrumentIPtr;
    class OMERO_CLIENT InstrumentI : virtual public Instrument {
   public:
      static const std::string MICROSCOPE;
      static const std::string DETECTOR;
      static const std::string OBJECTIVE;
      static const std::string LIGHTSOURCE;
      static const std::string FILTER;
      static const std::string DICHROIC;
      static const std::string FILTERSET;
      static const std::string OTF;
      static const std::string ANNOTATIONLINKS;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~InstrumentI();
    public:
      InstrumentI();
      InstrumentI(omero::RLongPtr idPtr, bool isLoaded = false);
      InstrumentI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  Instrument.microscope
      //
      virtual void unloadMicroscope();
      virtual omero::model::MicroscopePtr getMicroscope(const Ice::Current& current = Ice::Current());
      virtual void setMicroscope(const omero::model::MicroscopePtr& _microscope, const Ice::Current& current = Ice::Current());

      //
      //  Instrument.detector
      //
      virtual void unloadDetector(const Ice::Current& current = Ice::Current());
    protected:
      virtual InstrumentDetectorSeq getDetector(const Ice::Current& current = Ice::Current());
      virtual void setDetector(const InstrumentDetectorSeq& _detector, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isDetectorLoaded();
      virtual Ice::Int sizeOfDetector(const Ice::Current& current = Ice::Current());
      virtual InstrumentDetectorSeq copyDetector(const Ice::Current& current = Ice::Current());
      virtual InstrumentDetectorSeq::iterator beginDetector();
      virtual InstrumentDetectorSeq::iterator endDetector();
      virtual void addDetector(const DetectorPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllDetectorSet(const InstrumentDetectorSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeDetector(const DetectorPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllDetectorSet(const InstrumentDetectorSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearDetector(const Ice::Current& current = Ice::Current());
      virtual void reloadDetector(const InstrumentPtr& toCopy, const Ice::Current& current = Ice::Current());

      //
      //  Instrument.objective
      //
      virtual void unloadObjective(const Ice::Current& current = Ice::Current());
    protected:
      virtual InstrumentObjectiveSeq getObjective(const Ice::Current& current = Ice::Current());
      virtual void setObjective(const InstrumentObjectiveSeq& _objective, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isObjectiveLoaded();
      virtual Ice::Int sizeOfObjective(const Ice::Current& current = Ice::Current());
      virtual InstrumentObjectiveSeq copyObjective(const Ice::Current& current = Ice::Current());
      virtual InstrumentObjectiveSeq::iterator beginObjective();
      virtual InstrumentObjectiveSeq::iterator endObjective();
      virtual void addObjective(const ObjectivePtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllObjectiveSet(const InstrumentObjectiveSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeObjective(const ObjectivePtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllObjectiveSet(const InstrumentObjectiveSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearObjective(const Ice::Current& current = Ice::Current());
      virtual void reloadObjective(const InstrumentPtr& toCopy, const Ice::Current& current = Ice::Current());

      //
      //  Instrument.lightSource
      //
      virtual void unloadLightSource(const Ice::Current& current = Ice::Current());
    protected:
      virtual InstrumentLightSourceSeq getLightSource(const Ice::Current& current = Ice::Current());
      virtual void setLightSource(const InstrumentLightSourceSeq& _lightSource, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isLightSourceLoaded();
      virtual Ice::Int sizeOfLightSource(const Ice::Current& current = Ice::Current());
      virtual InstrumentLightSourceSeq copyLightSource(const Ice::Current& current = Ice::Current());
      virtual InstrumentLightSourceSeq::iterator beginLightSource();
      virtual InstrumentLightSourceSeq::iterator endLightSource();
      virtual void addLightSource(const LightSourcePtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllLightSourceSet(const InstrumentLightSourceSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeLightSource(const LightSourcePtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllLightSourceSet(const InstrumentLightSourceSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearLightSource(const Ice::Current& current = Ice::Current());
      virtual void reloadLightSource(const InstrumentPtr& toCopy, const Ice::Current& current = Ice::Current());

      //
      //  Instrument.filter
      //
      virtual void unloadFilter(const Ice::Current& current = Ice::Current());
    protected:
      virtual InstrumentFilterSeq getFilter(const Ice::Current& current = Ice::Current());
      virtual void setFilter(const InstrumentFilterSeq& _filter, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isFilterLoaded();
      virtual Ice::Int sizeOfFilter(const Ice::Current& current = Ice::Current());
      virtual InstrumentFilterSeq copyFilter(const Ice::Current& current = Ice::Current());
      virtual InstrumentFilterSeq::iterator beginFilter();
      virtual InstrumentFilterSeq::iterator endFilter();
      virtual void addFilter(const FilterPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllFilterSet(const InstrumentFilterSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeFilter(const FilterPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllFilterSet(const InstrumentFilterSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearFilter(const Ice::Current& current = Ice::Current());
      virtual void reloadFilter(const InstrumentPtr& toCopy, const Ice::Current& current = Ice::Current());

      //
      //  Instrument.dichroic
      //
      virtual void unloadDichroic(const Ice::Current& current = Ice::Current());
    protected:
      virtual InstrumentDichroicSeq getDichroic(const Ice::Current& current = Ice::Current());
      virtual void setDichroic(const InstrumentDichroicSeq& _dichroic, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isDichroicLoaded();
      virtual Ice::Int sizeOfDichroic(const Ice::Current& current = Ice::Current());
      virtual InstrumentDichroicSeq copyDichroic(const Ice::Current& current = Ice::Current());
      virtual InstrumentDichroicSeq::iterator beginDichroic();
      virtual InstrumentDichroicSeq::iterator endDichroic();
      virtual void addDichroic(const DichroicPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllDichroicSet(const InstrumentDichroicSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeDichroic(const DichroicPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllDichroicSet(const InstrumentDichroicSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearDichroic(const Ice::Current& current = Ice::Current());
      virtual void reloadDichroic(const InstrumentPtr& toCopy, const Ice::Current& current = Ice::Current());

      //
      //  Instrument.filterSet
      //
      virtual void unloadFilterSet(const Ice::Current& current = Ice::Current());
    protected:
      virtual InstrumentFilterSetSeq getFilterSet(const Ice::Current& current = Ice::Current());
      virtual void setFilterSet(const InstrumentFilterSetSeq& _filterSet, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isFilterSetLoaded();
      virtual Ice::Int sizeOfFilterSet(const Ice::Current& current = Ice::Current());
      virtual InstrumentFilterSetSeq copyFilterSet(const Ice::Current& current = Ice::Current());
      virtual InstrumentFilterSetSeq::iterator beginFilterSet();
      virtual InstrumentFilterSetSeq::iterator endFilterSet();
      virtual void addFilterSet(const FilterSetPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllFilterSetSet(const InstrumentFilterSetSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeFilterSet(const FilterSetPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllFilterSetSet(const InstrumentFilterSetSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearFilterSet(const Ice::Current& current = Ice::Current());
      virtual void reloadFilterSet(const InstrumentPtr& toCopy, const Ice::Current& current = Ice::Current());

      //
      //  Instrument.otf
      //
      virtual void unloadOtf(const Ice::Current& current = Ice::Current());
    protected:
      virtual InstrumentOtfSeq getOtf(const Ice::Current& current = Ice::Current());
      virtual void setOtf(const InstrumentOtfSeq& _otf, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isOtfLoaded();
      virtual Ice::Int sizeOfOtf(const Ice::Current& current = Ice::Current());
      virtual InstrumentOtfSeq copyOtf(const Ice::Current& current = Ice::Current());
      virtual InstrumentOtfSeq::iterator beginOtf();
      virtual InstrumentOtfSeq::iterator endOtf();
      virtual void addOTF(const OTFPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllOTFSet(const InstrumentOtfSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeOTF(const OTFPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllOTFSet(const InstrumentOtfSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearOtf(const Ice::Current& current = Ice::Current());
      virtual void reloadOtf(const InstrumentPtr& toCopy, const Ice::Current& current = Ice::Current());

      //
      //  Instrument.annotationLinks
      //
      virtual void unloadAnnotationLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual InstrumentAnnotationLinksSeq getAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void setAnnotationLinks(const InstrumentAnnotationLinksSeq& _annotationLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isAnnotationLinksLoaded();
      virtual Ice::Int sizeOfAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual InstrumentAnnotationLinksSeq copyAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual InstrumentAnnotationLinksSeq::iterator beginAnnotationLinks();
      virtual InstrumentAnnotationLinksSeq::iterator endAnnotationLinks();
      virtual void addInstrumentAnnotationLink(const InstrumentAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllInstrumentAnnotationLinkSet(const InstrumentAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeInstrumentAnnotationLink(const InstrumentAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllInstrumentAnnotationLinkSet(const InstrumentAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadAnnotationLinks(const InstrumentPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getAnnotationLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual InstrumentAnnotationLinkPtr linkAnnotation(const AnnotationPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addInstrumentAnnotationLinkToBoth(const InstrumentAnnotationLinkPtr& link, bool /*unused*/, const Ice::Current& current = Ice::Current());
      virtual InstrumentAnnotationLinksSeq findInstrumentAnnotationLink(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkAnnotation(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeInstrumentAnnotationLinkFromBoth(const InstrumentAnnotationLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual InstrumentLinkedAnnotationSeq linkedAnnotationList(const Ice::Current& current = Ice::Current());
 };

}}
#endif // INSTRUMENTI_H
