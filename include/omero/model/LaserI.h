   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef LASERI_H
#define LASERI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/Laser.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT LaserI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::LaserI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<LaserI> LaserIPtr;
    class OMERO_CLIENT LaserI : virtual public Laser {
   public:
      static const std::string TYPE;
      static const std::string LASERMEDIUM;
      static const std::string FREQUENCYMULTIPLICATION;
      static const std::string TUNEABLE;
      static const std::string PULSE;
      static const std::string WAVELENGTH;
      static const std::string POCKELCELL;
      static const std::string PUMP;
      static const std::string REPETITIONRATE;
      static const std::string MANUFACTURER;
      static const std::string MODEL;
      static const std::string POWER;
      static const std::string LOTNUMBER;
      static const std::string SERIALNUMBER;
      static const std::string INSTRUMENT;
      static const std::string ANNOTATIONLINKS;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~LaserI();
    public:
      LaserI();
      LaserI(omero::RLongPtr idPtr, bool isLoaded = false);
      LaserI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  Laser.type
      //
      virtual void unloadType();
      virtual omero::model::LaserTypePtr getType(const Ice::Current& current = Ice::Current());
      virtual void setType(const omero::model::LaserTypePtr& _type, const Ice::Current& current = Ice::Current());

      //
      //  Laser.laserMedium
      //
      virtual void unloadLaserMedium();
      virtual omero::model::LaserMediumPtr getLaserMedium(const Ice::Current& current = Ice::Current());
      virtual void setLaserMedium(const omero::model::LaserMediumPtr& _laserMedium, const Ice::Current& current = Ice::Current());

      //
      //  Laser.frequencyMultiplication
      //
      virtual void unloadFrequencyMultiplication();
      virtual omero::RIntPtr getFrequencyMultiplication(const Ice::Current& current = Ice::Current());
      virtual void setFrequencyMultiplication(const omero::RIntPtr& _frequencyMultiplication, const Ice::Current& current = Ice::Current());

      //
      //  Laser.tuneable
      //
      virtual void unloadTuneable();
      virtual omero::RBoolPtr getTuneable(const Ice::Current& current = Ice::Current());
      virtual void setTuneable(const omero::RBoolPtr& _tuneable, const Ice::Current& current = Ice::Current());

      //
      //  Laser.pulse
      //
      virtual void unloadPulse();
      virtual omero::model::PulsePtr getPulse(const Ice::Current& current = Ice::Current());
      virtual void setPulse(const omero::model::PulsePtr& _pulse, const Ice::Current& current = Ice::Current());

      //
      //  Laser.wavelength
      //
      virtual void unloadWavelength();
      virtual omero::model::LengthPtr getWavelength(const Ice::Current& current = Ice::Current());
      virtual void setWavelength(const omero::model::LengthPtr& _wavelength, const Ice::Current& current = Ice::Current());

      //
      //  Laser.pockelCell
      //
      virtual void unloadPockelCell();
      virtual omero::RBoolPtr getPockelCell(const Ice::Current& current = Ice::Current());
      virtual void setPockelCell(const omero::RBoolPtr& _pockelCell, const Ice::Current& current = Ice::Current());

      //
      //  Laser.pump
      //
      virtual void unloadPump();
      virtual omero::model::LightSourcePtr getPump(const Ice::Current& current = Ice::Current());
      virtual void setPump(const omero::model::LightSourcePtr& _pump, const Ice::Current& current = Ice::Current());

      //
      //  Laser.repetitionRate
      //
      virtual void unloadRepetitionRate();
      virtual omero::model::FrequencyPtr getRepetitionRate(const Ice::Current& current = Ice::Current());
      virtual void setRepetitionRate(const omero::model::FrequencyPtr& _repetitionRate, const Ice::Current& current = Ice::Current());

      //
      //  Laser.manufacturer
      //
      virtual void unloadManufacturer();
      virtual omero::RStringPtr getManufacturer(const Ice::Current& current = Ice::Current());
      virtual void setManufacturer(const omero::RStringPtr& _manufacturer, const Ice::Current& current = Ice::Current());

      //
      //  Laser.model
      //
      virtual void unloadModel();
      virtual omero::RStringPtr getModel(const Ice::Current& current = Ice::Current());
      virtual void setModel(const omero::RStringPtr& _model, const Ice::Current& current = Ice::Current());

      //
      //  Laser.power
      //
      virtual void unloadPower();
      virtual omero::model::PowerPtr getPower(const Ice::Current& current = Ice::Current());
      virtual void setPower(const omero::model::PowerPtr& _power, const Ice::Current& current = Ice::Current());

      //
      //  Laser.lotNumber
      //
      virtual void unloadLotNumber();
      virtual omero::RStringPtr getLotNumber(const Ice::Current& current = Ice::Current());
      virtual void setLotNumber(const omero::RStringPtr& _lotNumber, const Ice::Current& current = Ice::Current());

      //
      //  Laser.serialNumber
      //
      virtual void unloadSerialNumber();
      virtual omero::RStringPtr getSerialNumber(const Ice::Current& current = Ice::Current());
      virtual void setSerialNumber(const omero::RStringPtr& _serialNumber, const Ice::Current& current = Ice::Current());

      //
      //  Laser.instrument
      //
      virtual void unloadInstrument();
      virtual omero::model::InstrumentPtr getInstrument(const Ice::Current& current = Ice::Current());
      virtual void setInstrument(const omero::model::InstrumentPtr& _instrument, const Ice::Current& current = Ice::Current());

      //
      //  Laser.annotationLinks
      //
      virtual void unloadAnnotationLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual LightSourceAnnotationLinksSeq getAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void setAnnotationLinks(const LightSourceAnnotationLinksSeq& _annotationLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isAnnotationLinksLoaded();
      virtual Ice::Int sizeOfAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual LightSourceAnnotationLinksSeq copyAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual LightSourceAnnotationLinksSeq::iterator beginAnnotationLinks();
      virtual LightSourceAnnotationLinksSeq::iterator endAnnotationLinks();
      virtual void addLightSourceAnnotationLink(const LightSourceAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllLightSourceAnnotationLinkSet(const LightSourceAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeLightSourceAnnotationLink(const LightSourceAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllLightSourceAnnotationLinkSet(const LightSourceAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadAnnotationLinks(const LightSourcePtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getAnnotationLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual LightSourceAnnotationLinkPtr linkAnnotation(const AnnotationPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addLightSourceAnnotationLinkToBoth(const LightSourceAnnotationLinkPtr& link, bool /*unused*/, const Ice::Current& current = Ice::Current());
      virtual LightSourceAnnotationLinksSeq findLightSourceAnnotationLink(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkAnnotation(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeLightSourceAnnotationLinkFromBoth(const LightSourceAnnotationLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual LightSourceLinkedAnnotationSeq linkedAnnotationList(const Ice::Current& current = Ice::Current());
 };

}}
#endif // LASERI_H
