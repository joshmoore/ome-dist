   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef LINEI_H
#define LINEI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/Line.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT LineI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::LineI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<LineI> LineIPtr;
    class OMERO_CLIENT LineI : virtual public Line {
   public:
      static const std::string X1;
      static const std::string Y1;
      static const std::string X2;
      static const std::string Y2;
      static const std::string MARKERSTART;
      static const std::string MARKEREND;
      static const std::string TEXTVALUE;
      static const std::string THEZ;
      static const std::string THET;
      static const std::string THEC;
      static const std::string ROI;
      static const std::string LOCKED;
      static const std::string TRANSFORM;
      static const std::string FILLCOLOR;
      static const std::string FILLRULE;
      static const std::string STROKECOLOR;
      static const std::string STROKEDASHARRAY;
      static const std::string STROKEWIDTH;
      static const std::string FONTFAMILY;
      static const std::string FONTSIZE;
      static const std::string FONTSTYLE;
      static const std::string ANNOTATIONLINKS;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~LineI();
    public:
      LineI();
      LineI(omero::RLongPtr idPtr, bool isLoaded = false);
      LineI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  Line.x1
      //
      virtual void unloadX1();
      virtual omero::RDoublePtr getX1(const Ice::Current& current = Ice::Current());
      virtual void setX1(const omero::RDoublePtr& _x1, const Ice::Current& current = Ice::Current());

      //
      //  Line.y1
      //
      virtual void unloadY1();
      virtual omero::RDoublePtr getY1(const Ice::Current& current = Ice::Current());
      virtual void setY1(const omero::RDoublePtr& _y1, const Ice::Current& current = Ice::Current());

      //
      //  Line.x2
      //
      virtual void unloadX2();
      virtual omero::RDoublePtr getX2(const Ice::Current& current = Ice::Current());
      virtual void setX2(const omero::RDoublePtr& _x2, const Ice::Current& current = Ice::Current());

      //
      //  Line.y2
      //
      virtual void unloadY2();
      virtual omero::RDoublePtr getY2(const Ice::Current& current = Ice::Current());
      virtual void setY2(const omero::RDoublePtr& _y2, const Ice::Current& current = Ice::Current());

      //
      //  Line.markerStart
      //
      virtual void unloadMarkerStart();
      virtual omero::RStringPtr getMarkerStart(const Ice::Current& current = Ice::Current());
      virtual void setMarkerStart(const omero::RStringPtr& _markerStart, const Ice::Current& current = Ice::Current());

      //
      //  Line.markerEnd
      //
      virtual void unloadMarkerEnd();
      virtual omero::RStringPtr getMarkerEnd(const Ice::Current& current = Ice::Current());
      virtual void setMarkerEnd(const omero::RStringPtr& _markerEnd, const Ice::Current& current = Ice::Current());

      //
      //  Line.textValue
      //
      virtual void unloadTextValue();
      virtual omero::RStringPtr getTextValue(const Ice::Current& current = Ice::Current());
      virtual void setTextValue(const omero::RStringPtr& _textValue, const Ice::Current& current = Ice::Current());

      //
      //  Line.theZ
      //
      virtual void unloadTheZ();
      virtual omero::RIntPtr getTheZ(const Ice::Current& current = Ice::Current());
      virtual void setTheZ(const omero::RIntPtr& _theZ, const Ice::Current& current = Ice::Current());

      //
      //  Line.theT
      //
      virtual void unloadTheT();
      virtual omero::RIntPtr getTheT(const Ice::Current& current = Ice::Current());
      virtual void setTheT(const omero::RIntPtr& _theT, const Ice::Current& current = Ice::Current());

      //
      //  Line.theC
      //
      virtual void unloadTheC();
      virtual omero::RIntPtr getTheC(const Ice::Current& current = Ice::Current());
      virtual void setTheC(const omero::RIntPtr& _theC, const Ice::Current& current = Ice::Current());

      //
      //  Line.roi
      //
      virtual void unloadRoi();
      virtual omero::model::RoiPtr getRoi(const Ice::Current& current = Ice::Current());
      virtual void setRoi(const omero::model::RoiPtr& _roi, const Ice::Current& current = Ice::Current());

      //
      //  Line.locked
      //
      virtual void unloadLocked();
      virtual omero::RBoolPtr getLocked(const Ice::Current& current = Ice::Current());
      virtual void setLocked(const omero::RBoolPtr& _locked, const Ice::Current& current = Ice::Current());

      //
      //  Line.transform
      //
      virtual void unloadTransform();
      virtual omero::model::AffineTransformPtr getTransform(const Ice::Current& current = Ice::Current());
      virtual void setTransform(const omero::model::AffineTransformPtr& _transform, const Ice::Current& current = Ice::Current());

      //
      //  Line.fillColor
      //
      virtual void unloadFillColor();
      virtual omero::RIntPtr getFillColor(const Ice::Current& current = Ice::Current());
      virtual void setFillColor(const omero::RIntPtr& _fillColor, const Ice::Current& current = Ice::Current());

      //
      //  Line.fillRule
      //
      virtual void unloadFillRule();
      virtual omero::RStringPtr getFillRule(const Ice::Current& current = Ice::Current());
      virtual void setFillRule(const omero::RStringPtr& _fillRule, const Ice::Current& current = Ice::Current());

      //
      //  Line.strokeColor
      //
      virtual void unloadStrokeColor();
      virtual omero::RIntPtr getStrokeColor(const Ice::Current& current = Ice::Current());
      virtual void setStrokeColor(const omero::RIntPtr& _strokeColor, const Ice::Current& current = Ice::Current());

      //
      //  Line.strokeDashArray
      //
      virtual void unloadStrokeDashArray();
      virtual omero::RStringPtr getStrokeDashArray(const Ice::Current& current = Ice::Current());
      virtual void setStrokeDashArray(const omero::RStringPtr& _strokeDashArray, const Ice::Current& current = Ice::Current());

      //
      //  Line.strokeWidth
      //
      virtual void unloadStrokeWidth();
      virtual omero::model::LengthPtr getStrokeWidth(const Ice::Current& current = Ice::Current());
      virtual void setStrokeWidth(const omero::model::LengthPtr& _strokeWidth, const Ice::Current& current = Ice::Current());

      //
      //  Line.fontFamily
      //
      virtual void unloadFontFamily();
      virtual omero::RStringPtr getFontFamily(const Ice::Current& current = Ice::Current());
      virtual void setFontFamily(const omero::RStringPtr& _fontFamily, const Ice::Current& current = Ice::Current());

      //
      //  Line.fontSize
      //
      virtual void unloadFontSize();
      virtual omero::model::LengthPtr getFontSize(const Ice::Current& current = Ice::Current());
      virtual void setFontSize(const omero::model::LengthPtr& _fontSize, const Ice::Current& current = Ice::Current());

      //
      //  Line.fontStyle
      //
      virtual void unloadFontStyle();
      virtual omero::RStringPtr getFontStyle(const Ice::Current& current = Ice::Current());
      virtual void setFontStyle(const omero::RStringPtr& _fontStyle, const Ice::Current& current = Ice::Current());

      //
      //  Line.annotationLinks
      //
      virtual void unloadAnnotationLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual ShapeAnnotationLinksSeq getAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void setAnnotationLinks(const ShapeAnnotationLinksSeq& _annotationLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isAnnotationLinksLoaded();
      virtual Ice::Int sizeOfAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual ShapeAnnotationLinksSeq copyAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual ShapeAnnotationLinksSeq::iterator beginAnnotationLinks();
      virtual ShapeAnnotationLinksSeq::iterator endAnnotationLinks();
      virtual void addShapeAnnotationLink(const ShapeAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllShapeAnnotationLinkSet(const ShapeAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeShapeAnnotationLink(const ShapeAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllShapeAnnotationLinkSet(const ShapeAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadAnnotationLinks(const ShapePtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getAnnotationLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual ShapeAnnotationLinkPtr linkAnnotation(const AnnotationPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addShapeAnnotationLinkToBoth(const ShapeAnnotationLinkPtr& link, bool /*unused*/, const Ice::Current& current = Ice::Current());
      virtual ShapeAnnotationLinksSeq findShapeAnnotationLink(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkAnnotation(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeShapeAnnotationLinkFromBoth(const ShapeAnnotationLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual ShapeLinkedAnnotationSeq linkedAnnotationList(const Ice::Current& current = Ice::Current());
 };

}}
#endif // LINEI_H
