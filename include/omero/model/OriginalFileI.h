   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef ORIGINALFILEI_H
#define ORIGINALFILEI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/OriginalFile.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#if ICE_INT_VERSION / 100 >= 304
#   include <Ice/Handle.h>
#else
#   include <IceUtil/Handle.h>
#endif
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT OriginalFileI;
  }
}
#if ICE_INT_VERSION / 100 >= 304
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::OriginalFileI*);
}
#endif
namespace omero {
  namespace model {
#if ICE_INT_VERSION / 100 >= 304
  typedef IceInternal::Handle<OriginalFileI> OriginalFileIPtr;
#else
  typedef IceUtil::Handle<OriginalFileI> OriginalFileIPtr;
#endif
    class OMERO_CLIENT OriginalFileI : virtual public OriginalFile {
   public:
      static const std::string PIXELSFILEMAPS;
      static const std::string PATH;
      static const std::string SIZE;
      static const std::string ATIME;
      static const std::string MTIME;
      static const std::string CTIME;
      static const std::string HASHER;
      static const std::string HASH;
      static const std::string MIMETYPE;
      static const std::string FILESETENTRIES;
      static const std::string ANNOTATIONLINKS;
      static const std::string NAME;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~OriginalFileI();
    public:
      OriginalFileI();
      OriginalFileI(omero::RLongPtr idPtr, bool isLoaded = false);
      OriginalFileI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  OriginalFile.pixelsFileMaps
      //
      virtual void unloadPixelsFileMaps(const Ice::Current& current = Ice::Current());
    protected:
      virtual OriginalFilePixelsFileMapsSeq getPixelsFileMaps(const Ice::Current& current = Ice::Current());
      virtual void setPixelsFileMaps(const OriginalFilePixelsFileMapsSeq& _pixelsFileMaps, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isPixelsFileMapsLoaded();
      virtual Ice::Int sizeOfPixelsFileMaps(const Ice::Current& current = Ice::Current());
      virtual OriginalFilePixelsFileMapsSeq copyPixelsFileMaps(const Ice::Current& current = Ice::Current());
      virtual OriginalFilePixelsFileMapsSeq::iterator beginPixelsFileMaps();
      virtual OriginalFilePixelsFileMapsSeq::iterator endPixelsFileMaps();
      virtual void addPixelsOriginalFileMap(const PixelsOriginalFileMapPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllPixelsOriginalFileMapSet(const OriginalFilePixelsFileMapsSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removePixelsOriginalFileMap(const PixelsOriginalFileMapPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllPixelsOriginalFileMapSet(const OriginalFilePixelsFileMapsSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearPixelsFileMaps(const Ice::Current& current = Ice::Current());
      virtual void reloadPixelsFileMaps(const OriginalFilePtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getPixelsFileMapsCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual PixelsOriginalFileMapPtr linkPixels(const PixelsPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addPixelsOriginalFileMapToBoth(const PixelsOriginalFileMapPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
      virtual OriginalFilePixelsFileMapsSeq findPixelsOriginalFileMap(const PixelsPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkPixels(const PixelsPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removePixelsOriginalFileMapFromBoth(const PixelsOriginalFileMapPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual OriginalFileLinkedPixelsSeq linkedPixelsList(const Ice::Current& current = Ice::Current());

      //
      //  OriginalFile.path
      //
      virtual void unloadPath();
      virtual omero::RStringPtr getPath(const Ice::Current& current = Ice::Current());
      virtual void setPath(const omero::RStringPtr& _path, const Ice::Current& current = Ice::Current());

      //
      //  OriginalFile.size
      //
      virtual void unloadSize();
      virtual omero::RLongPtr getSize(const Ice::Current& current = Ice::Current());
      virtual void setSize(const omero::RLongPtr& _size, const Ice::Current& current = Ice::Current());

      //
      //  OriginalFile.atime
      //
      virtual void unloadAtime();
      virtual omero::RTimePtr getAtime(const Ice::Current& current = Ice::Current());
      virtual void setAtime(const omero::RTimePtr& _atime, const Ice::Current& current = Ice::Current());

      //
      //  OriginalFile.mtime
      //
      virtual void unloadMtime();
      virtual omero::RTimePtr getMtime(const Ice::Current& current = Ice::Current());
      virtual void setMtime(const omero::RTimePtr& _mtime, const Ice::Current& current = Ice::Current());

      //
      //  OriginalFile.ctime
      //
      virtual void unloadCtime();
      virtual omero::RTimePtr getCtime(const Ice::Current& current = Ice::Current());
      virtual void setCtime(const omero::RTimePtr& _ctime, const Ice::Current& current = Ice::Current());

      //
      //  OriginalFile.hasher
      //
      virtual void unloadHasher();
      virtual omero::model::ChecksumAlgorithmPtr getHasher(const Ice::Current& current = Ice::Current());
      virtual void setHasher(const omero::model::ChecksumAlgorithmPtr& _hasher, const Ice::Current& current = Ice::Current());

      //
      //  OriginalFile.hash
      //
      virtual void unloadHash();
      virtual omero::RStringPtr getHash(const Ice::Current& current = Ice::Current());
      virtual void setHash(const omero::RStringPtr& _hash, const Ice::Current& current = Ice::Current());

      //
      //  OriginalFile.mimetype
      //
      virtual void unloadMimetype();
      virtual omero::RStringPtr getMimetype(const Ice::Current& current = Ice::Current());
      virtual void setMimetype(const omero::RStringPtr& _mimetype, const Ice::Current& current = Ice::Current());

      //
      //  OriginalFile.filesetEntries
      //
      virtual void unloadFilesetEntries(const Ice::Current& current = Ice::Current());
    protected:
      virtual OriginalFileFilesetEntriesSeq getFilesetEntries(const Ice::Current& current = Ice::Current());
      virtual void setFilesetEntries(const OriginalFileFilesetEntriesSeq& _filesetEntries, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isFilesetEntriesLoaded();
      virtual Ice::Int sizeOfFilesetEntries(const Ice::Current& current = Ice::Current());
      virtual OriginalFileFilesetEntriesSeq copyFilesetEntries(const Ice::Current& current = Ice::Current());
      virtual OriginalFileFilesetEntriesSeq::iterator beginFilesetEntries();
      virtual OriginalFileFilesetEntriesSeq::iterator endFilesetEntries();
      virtual void addFilesetEntry(const FilesetEntryPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllFilesetEntrySet(const OriginalFileFilesetEntriesSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeFilesetEntry(const FilesetEntryPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllFilesetEntrySet(const OriginalFileFilesetEntriesSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearFilesetEntries(const Ice::Current& current = Ice::Current());
      virtual void reloadFilesetEntries(const OriginalFilePtr& toCopy, const Ice::Current& current = Ice::Current());

      //
      //  OriginalFile.annotationLinks
      //
      virtual void unloadAnnotationLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual OriginalFileAnnotationLinksSeq getAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void setAnnotationLinks(const OriginalFileAnnotationLinksSeq& _annotationLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isAnnotationLinksLoaded();
      virtual Ice::Int sizeOfAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual OriginalFileAnnotationLinksSeq copyAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual OriginalFileAnnotationLinksSeq::iterator beginAnnotationLinks();
      virtual OriginalFileAnnotationLinksSeq::iterator endAnnotationLinks();
      virtual void addOriginalFileAnnotationLink(const OriginalFileAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllOriginalFileAnnotationLinkSet(const OriginalFileAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeOriginalFileAnnotationLink(const OriginalFileAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllOriginalFileAnnotationLinkSet(const OriginalFileAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadAnnotationLinks(const OriginalFilePtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getAnnotationLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual OriginalFileAnnotationLinkPtr linkAnnotation(const AnnotationPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addOriginalFileAnnotationLinkToBoth(const OriginalFileAnnotationLinkPtr& link, bool /*unused*/, const Ice::Current& current = Ice::Current());
      virtual OriginalFileAnnotationLinksSeq findOriginalFileAnnotationLink(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkAnnotation(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeOriginalFileAnnotationLinkFromBoth(const OriginalFileAnnotationLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual OriginalFileLinkedAnnotationSeq linkedAnnotationList(const Ice::Current& current = Ice::Current());

      //
      //  OriginalFile.name
      //
      virtual void unloadName();
      virtual omero::RStringPtr getName(const Ice::Current& current = Ice::Current());
      virtual void setName(const omero::RStringPtr& _name, const Ice::Current& current = Ice::Current());
 };

}}
#endif // ORIGINALFILEI_H
