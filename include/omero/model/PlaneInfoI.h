   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef PLANEINFOI_H
#define PLANEINFOI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/PlaneInfo.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#if ICE_INT_VERSION / 100 >= 304
#   include <Ice/Handle.h>
#else
#   include <IceUtil/Handle.h>
#endif
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT PlaneInfoI;
  }
}
#if ICE_INT_VERSION / 100 >= 304
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::PlaneInfoI*);
}
#endif
namespace omero {
  namespace model {
#if ICE_INT_VERSION / 100 >= 304
  typedef IceInternal::Handle<PlaneInfoI> PlaneInfoIPtr;
#else
  typedef IceUtil::Handle<PlaneInfoI> PlaneInfoIPtr;
#endif
    class OMERO_CLIENT PlaneInfoI : virtual public PlaneInfo {
   public:
      static const std::string PIXELS;
      static const std::string THEZ;
      static const std::string THEC;
      static const std::string THET;
      static const std::string DELTAT;
      static const std::string POSITIONX;
      static const std::string POSITIONY;
      static const std::string POSITIONZ;
      static const std::string EXPOSURETIME;
      static const std::string ANNOTATIONLINKS;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~PlaneInfoI();
    public:
      PlaneInfoI();
      PlaneInfoI(omero::RLongPtr idPtr, bool isLoaded = false);
      PlaneInfoI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  PlaneInfo.pixels
      //
      virtual void unloadPixels();
      virtual omero::model::PixelsPtr getPixels(const Ice::Current& current = Ice::Current());
      virtual void setPixels(const omero::model::PixelsPtr& _pixels, const Ice::Current& current = Ice::Current());

      //
      //  PlaneInfo.theZ
      //
      virtual void unloadTheZ();
      virtual omero::RIntPtr getTheZ(const Ice::Current& current = Ice::Current());
      virtual void setTheZ(const omero::RIntPtr& _theZ, const Ice::Current& current = Ice::Current());

      //
      //  PlaneInfo.theC
      //
      virtual void unloadTheC();
      virtual omero::RIntPtr getTheC(const Ice::Current& current = Ice::Current());
      virtual void setTheC(const omero::RIntPtr& _theC, const Ice::Current& current = Ice::Current());

      //
      //  PlaneInfo.theT
      //
      virtual void unloadTheT();
      virtual omero::RIntPtr getTheT(const Ice::Current& current = Ice::Current());
      virtual void setTheT(const omero::RIntPtr& _theT, const Ice::Current& current = Ice::Current());

      //
      //  PlaneInfo.deltaT
      //
      virtual void unloadDeltaT();
      virtual omero::model::TimePtr getDeltaT(const Ice::Current& current = Ice::Current());
      virtual void setDeltaT(const omero::model::TimePtr& _deltaT, const Ice::Current& current = Ice::Current());

      //
      //  PlaneInfo.positionX
      //
      virtual void unloadPositionX();
      virtual omero::model::LengthPtr getPositionX(const Ice::Current& current = Ice::Current());
      virtual void setPositionX(const omero::model::LengthPtr& _positionX, const Ice::Current& current = Ice::Current());

      //
      //  PlaneInfo.positionY
      //
      virtual void unloadPositionY();
      virtual omero::model::LengthPtr getPositionY(const Ice::Current& current = Ice::Current());
      virtual void setPositionY(const omero::model::LengthPtr& _positionY, const Ice::Current& current = Ice::Current());

      //
      //  PlaneInfo.positionZ
      //
      virtual void unloadPositionZ();
      virtual omero::model::LengthPtr getPositionZ(const Ice::Current& current = Ice::Current());
      virtual void setPositionZ(const omero::model::LengthPtr& _positionZ, const Ice::Current& current = Ice::Current());

      //
      //  PlaneInfo.exposureTime
      //
      virtual void unloadExposureTime();
      virtual omero::model::TimePtr getExposureTime(const Ice::Current& current = Ice::Current());
      virtual void setExposureTime(const omero::model::TimePtr& _exposureTime, const Ice::Current& current = Ice::Current());

      //
      //  PlaneInfo.annotationLinks
      //
      virtual void unloadAnnotationLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual PlaneInfoAnnotationLinksSeq getAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void setAnnotationLinks(const PlaneInfoAnnotationLinksSeq& _annotationLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isAnnotationLinksLoaded();
      virtual Ice::Int sizeOfAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual PlaneInfoAnnotationLinksSeq copyAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual PlaneInfoAnnotationLinksSeq::iterator beginAnnotationLinks();
      virtual PlaneInfoAnnotationLinksSeq::iterator endAnnotationLinks();
      virtual void addPlaneInfoAnnotationLink(const PlaneInfoAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllPlaneInfoAnnotationLinkSet(const PlaneInfoAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removePlaneInfoAnnotationLink(const PlaneInfoAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllPlaneInfoAnnotationLinkSet(const PlaneInfoAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadAnnotationLinks(const PlaneInfoPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getAnnotationLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual PlaneInfoAnnotationLinkPtr linkAnnotation(const AnnotationPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addPlaneInfoAnnotationLinkToBoth(const PlaneInfoAnnotationLinkPtr& link, bool /*unused*/, const Ice::Current& current = Ice::Current());
      virtual PlaneInfoAnnotationLinksSeq findPlaneInfoAnnotationLink(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkAnnotation(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removePlaneInfoAnnotationLinkFromBoth(const PlaneInfoAnnotationLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual PlaneInfoLinkedAnnotationSeq linkedAnnotationList(const Ice::Current& current = Ice::Current());
 };

}}
#endif // PLANEINFOI_H
