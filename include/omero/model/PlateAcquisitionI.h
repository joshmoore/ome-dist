   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef PLATEACQUISITIONI_H
#define PLATEACQUISITIONI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/PlateAcquisition.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT PlateAcquisitionI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::PlateAcquisitionI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<PlateAcquisitionI> PlateAcquisitionIPtr;
    class OMERO_CLIENT PlateAcquisitionI : virtual public PlateAcquisition {
   public:
      static const std::string NAME;
      static const std::string STARTTIME;
      static const std::string ENDTIME;
      static const std::string MAXIMUMFIELDCOUNT;
      static const std::string PLATE;
      static const std::string WELLSAMPLE;
      static const std::string ANNOTATIONLINKS;
      static const std::string DESCRIPTION;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~PlateAcquisitionI();
    public:
      PlateAcquisitionI();
      PlateAcquisitionI(omero::RLongPtr idPtr, bool isLoaded = false);
      PlateAcquisitionI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  PlateAcquisition.name
      //
      virtual void unloadName();
      virtual omero::RStringPtr getName(const Ice::Current& current = Ice::Current());
      virtual void setName(const omero::RStringPtr& _name, const Ice::Current& current = Ice::Current());

      //
      //  PlateAcquisition.startTime
      //
      virtual void unloadStartTime();
      virtual omero::RTimePtr getStartTime(const Ice::Current& current = Ice::Current());
      virtual void setStartTime(const omero::RTimePtr& _startTime, const Ice::Current& current = Ice::Current());

      //
      //  PlateAcquisition.endTime
      //
      virtual void unloadEndTime();
      virtual omero::RTimePtr getEndTime(const Ice::Current& current = Ice::Current());
      virtual void setEndTime(const omero::RTimePtr& _endTime, const Ice::Current& current = Ice::Current());

      //
      //  PlateAcquisition.maximumFieldCount
      //
      virtual void unloadMaximumFieldCount();
      virtual omero::RIntPtr getMaximumFieldCount(const Ice::Current& current = Ice::Current());
      virtual void setMaximumFieldCount(const omero::RIntPtr& _maximumFieldCount, const Ice::Current& current = Ice::Current());

      //
      //  PlateAcquisition.plate
      //
      virtual void unloadPlate();
      virtual omero::model::PlatePtr getPlate(const Ice::Current& current = Ice::Current());
      virtual void setPlate(const omero::model::PlatePtr& _plate, const Ice::Current& current = Ice::Current());

      //
      //  PlateAcquisition.wellSample
      //
      virtual void unloadWellSample(const Ice::Current& current = Ice::Current());
    protected:
      virtual PlateAcquisitionWellSampleSeq getWellSample(const Ice::Current& current = Ice::Current());
      virtual void setWellSample(const PlateAcquisitionWellSampleSeq& _wellSample, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isWellSampleLoaded();
      virtual Ice::Int sizeOfWellSample(const Ice::Current& current = Ice::Current());
      virtual PlateAcquisitionWellSampleSeq copyWellSample(const Ice::Current& current = Ice::Current());
      virtual PlateAcquisitionWellSampleSeq::iterator beginWellSample();
      virtual PlateAcquisitionWellSampleSeq::iterator endWellSample();
      virtual void addWellSample(const WellSamplePtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllWellSampleSet(const PlateAcquisitionWellSampleSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeWellSample(const WellSamplePtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllWellSampleSet(const PlateAcquisitionWellSampleSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearWellSample(const Ice::Current& current = Ice::Current());
      virtual void reloadWellSample(const PlateAcquisitionPtr& toCopy, const Ice::Current& current = Ice::Current());

      //
      //  PlateAcquisition.annotationLinks
      //
      virtual void unloadAnnotationLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual PlateAcquisitionAnnotationLinksSeq getAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void setAnnotationLinks(const PlateAcquisitionAnnotationLinksSeq& _annotationLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isAnnotationLinksLoaded();
      virtual Ice::Int sizeOfAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual PlateAcquisitionAnnotationLinksSeq copyAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual PlateAcquisitionAnnotationLinksSeq::iterator beginAnnotationLinks();
      virtual PlateAcquisitionAnnotationLinksSeq::iterator endAnnotationLinks();
      virtual void addPlateAcquisitionAnnotationLink(const PlateAcquisitionAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllPlateAcquisitionAnnotationLinkSet(const PlateAcquisitionAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removePlateAcquisitionAnnotationLink(const PlateAcquisitionAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllPlateAcquisitionAnnotationLinkSet(const PlateAcquisitionAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadAnnotationLinks(const PlateAcquisitionPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getAnnotationLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual PlateAcquisitionAnnotationLinkPtr linkAnnotation(const AnnotationPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addPlateAcquisitionAnnotationLinkToBoth(const PlateAcquisitionAnnotationLinkPtr& link, bool /*unused*/, const Ice::Current& current = Ice::Current());
      virtual PlateAcquisitionAnnotationLinksSeq findPlateAcquisitionAnnotationLink(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkAnnotation(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removePlateAcquisitionAnnotationLinkFromBoth(const PlateAcquisitionAnnotationLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual PlateAcquisitionLinkedAnnotationSeq linkedAnnotationList(const Ice::Current& current = Ice::Current());

      //
      //  PlateAcquisition.description
      //
      virtual void unloadDescription();
      virtual omero::RStringPtr getDescription(const Ice::Current& current = Ice::Current());
      virtual void setDescription(const omero::RStringPtr& _description, const Ice::Current& current = Ice::Current());
 };

}}
#endif // PLATEACQUISITIONI_H
