   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef PROJECTIONDEFI_H
#define PROJECTIONDEFI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/ProjectionDef.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT ProjectionDefI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::ProjectionDefI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<ProjectionDefI> ProjectionDefIPtr;
    class OMERO_CLIENT ProjectionDefI : virtual public ProjectionDef {
   public:
      static const std::string RENDERINGDEF;
      static const std::string AXIS;
      static const std::string TYPE;
      static const std::string ACTIVE;
      static const std::string STARTPLANE;
      static const std::string ENDPLANE;
      static const std::string STEPPING;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool /*unused*/);
      virtual ~ProjectionDefI();
    public:
      ProjectionDefI();
      ProjectionDefI(omero::RLongPtr idPtr, bool isLoaded = false);
      ProjectionDefI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  ProjectionDef.renderingDef
      //
      virtual void unloadRenderingDef();
      virtual omero::model::RenderingDefPtr getRenderingDef(const Ice::Current& current = Ice::Current());
      virtual void setRenderingDef(const omero::model::RenderingDefPtr& _renderingDef, const Ice::Current& current = Ice::Current());

      //
      //  ProjectionDef.axis
      //
      virtual void unloadAxis();
      virtual omero::model::ProjectionAxisPtr getAxis(const Ice::Current& current = Ice::Current());
      virtual void setAxis(const omero::model::ProjectionAxisPtr& _axis, const Ice::Current& current = Ice::Current());

      //
      //  ProjectionDef.type
      //
      virtual void unloadType();
      virtual omero::model::ProjectionTypePtr getType(const Ice::Current& current = Ice::Current());
      virtual void setType(const omero::model::ProjectionTypePtr& _type, const Ice::Current& current = Ice::Current());

      //
      //  ProjectionDef.active
      //
      virtual void unloadActive();
      virtual omero::RBoolPtr getActive(const Ice::Current& current = Ice::Current());
      virtual void setActive(const omero::RBoolPtr& _active, const Ice::Current& current = Ice::Current());

      //
      //  ProjectionDef.startPlane
      //
      virtual void unloadStartPlane();
      virtual omero::RIntPtr getStartPlane(const Ice::Current& current = Ice::Current());
      virtual void setStartPlane(const omero::RIntPtr& _startPlane, const Ice::Current& current = Ice::Current());

      //
      //  ProjectionDef.endPlane
      //
      virtual void unloadEndPlane();
      virtual omero::RIntPtr getEndPlane(const Ice::Current& current = Ice::Current());
      virtual void setEndPlane(const omero::RIntPtr& _endPlane, const Ice::Current& current = Ice::Current());

      //
      //  ProjectionDef.stepping
      //
      virtual void unloadStepping();
      virtual omero::RIntPtr getStepping(const Ice::Current& current = Ice::Current());
      virtual void setStepping(const omero::RIntPtr& _stepping, const Ice::Current& current = Ice::Current());
 };

}}
#endif // PROJECTIONDEFI_H
