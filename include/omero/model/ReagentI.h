   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef REAGENTI_H
#define REAGENTI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/Reagent.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT ReagentI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::ReagentI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<ReagentI> ReagentIPtr;
    class OMERO_CLIENT ReagentI : virtual public Reagent {
   public:
      static const std::string NAME;
      static const std::string REAGENTIDENTIFIER;
      static const std::string SCREEN;
      static const std::string WELLLINKS;
      static const std::string ANNOTATIONLINKS;
      static const std::string DESCRIPTION;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~ReagentI();
    public:
      ReagentI();
      ReagentI(omero::RLongPtr idPtr, bool isLoaded = false);
      ReagentI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  Reagent.name
      //
      virtual void unloadName();
      virtual omero::RStringPtr getName(const Ice::Current& current = Ice::Current());
      virtual void setName(const omero::RStringPtr& _name, const Ice::Current& current = Ice::Current());

      //
      //  Reagent.reagentIdentifier
      //
      virtual void unloadReagentIdentifier();
      virtual omero::RStringPtr getReagentIdentifier(const Ice::Current& current = Ice::Current());
      virtual void setReagentIdentifier(const omero::RStringPtr& _reagentIdentifier, const Ice::Current& current = Ice::Current());

      //
      //  Reagent.screen
      //
      virtual void unloadScreen();
      virtual omero::model::ScreenPtr getScreen(const Ice::Current& current = Ice::Current());
      virtual void setScreen(const omero::model::ScreenPtr& _screen, const Ice::Current& current = Ice::Current());

      //
      //  Reagent.wellLinks
      //
      virtual void unloadWellLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual ReagentWellLinksSeq getWellLinks(const Ice::Current& current = Ice::Current());
      virtual void setWellLinks(const ReagentWellLinksSeq& _wellLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isWellLinksLoaded();
      virtual Ice::Int sizeOfWellLinks(const Ice::Current& current = Ice::Current());
      virtual ReagentWellLinksSeq copyWellLinks(const Ice::Current& current = Ice::Current());
      virtual ReagentWellLinksSeq::iterator beginWellLinks();
      virtual ReagentWellLinksSeq::iterator endWellLinks();
      virtual void addWellReagentLink(const WellReagentLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllWellReagentLinkSet(const ReagentWellLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeWellReagentLink(const WellReagentLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllWellReagentLinkSet(const ReagentWellLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearWellLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadWellLinks(const ReagentPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getWellLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual WellReagentLinkPtr linkWell(const WellPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addWellReagentLinkToBoth(const WellReagentLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
      virtual ReagentWellLinksSeq findWellReagentLink(const WellPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkWell(const WellPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeWellReagentLinkFromBoth(const WellReagentLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual ReagentLinkedWellSeq linkedWellList(const Ice::Current& current = Ice::Current());

      //
      //  Reagent.annotationLinks
      //
      virtual void unloadAnnotationLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual ReagentAnnotationLinksSeq getAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void setAnnotationLinks(const ReagentAnnotationLinksSeq& _annotationLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isAnnotationLinksLoaded();
      virtual Ice::Int sizeOfAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual ReagentAnnotationLinksSeq copyAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual ReagentAnnotationLinksSeq::iterator beginAnnotationLinks();
      virtual ReagentAnnotationLinksSeq::iterator endAnnotationLinks();
      virtual void addReagentAnnotationLink(const ReagentAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllReagentAnnotationLinkSet(const ReagentAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeReagentAnnotationLink(const ReagentAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllReagentAnnotationLinkSet(const ReagentAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadAnnotationLinks(const ReagentPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getAnnotationLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual ReagentAnnotationLinkPtr linkAnnotation(const AnnotationPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addReagentAnnotationLinkToBoth(const ReagentAnnotationLinkPtr& link, bool /*unused*/, const Ice::Current& current = Ice::Current());
      virtual ReagentAnnotationLinksSeq findReagentAnnotationLink(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkAnnotation(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeReagentAnnotationLinkFromBoth(const ReagentAnnotationLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual ReagentLinkedAnnotationSeq linkedAnnotationList(const Ice::Current& current = Ice::Current());

      //
      //  Reagent.description
      //
      virtual void unloadDescription();
      virtual omero::RStringPtr getDescription(const Ice::Current& current = Ice::Current());
      virtual void setDescription(const omero::RStringPtr& _description, const Ice::Current& current = Ice::Current());
 };

}}
#endif // REAGENTI_H
