   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef RENDERINGDEFI_H
#define RENDERINGDEFI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/RenderingDef.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT RenderingDefI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::RenderingDefI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<RenderingDefI> RenderingDefIPtr;
    class OMERO_CLIENT RenderingDefI : virtual public RenderingDef {
   public:
      static const std::string PIXELS;
      static const std::string DEFAULTZ;
      static const std::string DEFAULTT;
      static const std::string MODEL;
      static const std::string WAVERENDERING;
      static const std::string NAME;
      static const std::string COMPRESSION;
      static const std::string QUANTIZATION;
      static const std::string PROJECTIONS;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~RenderingDefI();
    public:
      RenderingDefI();
      RenderingDefI(omero::RLongPtr idPtr, bool isLoaded = false);
      RenderingDefI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  RenderingDef.pixels
      //
      virtual void unloadPixels();
      virtual omero::model::PixelsPtr getPixels(const Ice::Current& current = Ice::Current());
      virtual void setPixels(const omero::model::PixelsPtr& _pixels, const Ice::Current& current = Ice::Current());

      //
      //  RenderingDef.defaultZ
      //
      virtual void unloadDefaultZ();
      virtual omero::RIntPtr getDefaultZ(const Ice::Current& current = Ice::Current());
      virtual void setDefaultZ(const omero::RIntPtr& _defaultZ, const Ice::Current& current = Ice::Current());

      //
      //  RenderingDef.defaultT
      //
      virtual void unloadDefaultT();
      virtual omero::RIntPtr getDefaultT(const Ice::Current& current = Ice::Current());
      virtual void setDefaultT(const omero::RIntPtr& _defaultT, const Ice::Current& current = Ice::Current());

      //
      //  RenderingDef.model
      //
      virtual void unloadModel();
      virtual omero::model::RenderingModelPtr getModel(const Ice::Current& current = Ice::Current());
      virtual void setModel(const omero::model::RenderingModelPtr& _model, const Ice::Current& current = Ice::Current());

      //
      //  RenderingDef.waveRendering
      //
      virtual void unloadWaveRendering(const Ice::Current& current = Ice::Current());
    protected:
      virtual RenderingDefWaveRenderingSeq getWaveRendering(const Ice::Current& current = Ice::Current());
      virtual void setWaveRendering(const RenderingDefWaveRenderingSeq& _waveRendering, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isWaveRenderingLoaded();
      virtual Ice::Int sizeOfWaveRendering(const Ice::Current& current = Ice::Current());
      virtual RenderingDefWaveRenderingSeq copyWaveRendering(const Ice::Current& current = Ice::Current());
      virtual RenderingDefWaveRenderingSeq::iterator beginWaveRendering();
      virtual RenderingDefWaveRenderingSeq::iterator endWaveRendering();
      virtual void addChannelBinding(const ChannelBindingPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllChannelBindingSet(const RenderingDefWaveRenderingSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeChannelBinding(const ChannelBindingPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllChannelBindingSet(const RenderingDefWaveRenderingSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearWaveRendering(const Ice::Current& current = Ice::Current());
      virtual void reloadWaveRendering(const RenderingDefPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual ChannelBindingPtr getChannelBinding(int index, const Ice::Current& current = Ice::Current());
      virtual ChannelBindingPtr setChannelBinding(int index, const ChannelBindingPtr& element, const Ice::Current& current = Ice::Current());
      virtual ChannelBindingPtr getPrimaryChannelBinding(const Ice::Current& current = Ice::Current());
      virtual ChannelBindingPtr setPrimaryChannelBinding(const ChannelBindingPtr& element, const Ice::Current& current = Ice::Current());

      //
      //  RenderingDef.name
      //
      virtual void unloadName();
      virtual omero::RStringPtr getName(const Ice::Current& current = Ice::Current());
      virtual void setName(const omero::RStringPtr& _name, const Ice::Current& current = Ice::Current());

      //
      //  RenderingDef.compression
      //
      virtual void unloadCompression();
      virtual omero::RDoublePtr getCompression(const Ice::Current& current = Ice::Current());
      virtual void setCompression(const omero::RDoublePtr& _compression, const Ice::Current& current = Ice::Current());

      //
      //  RenderingDef.quantization
      //
      virtual void unloadQuantization();
      virtual omero::model::QuantumDefPtr getQuantization(const Ice::Current& current = Ice::Current());
      virtual void setQuantization(const omero::model::QuantumDefPtr& _quantization, const Ice::Current& current = Ice::Current());

      //
      //  RenderingDef.projections
      //
      virtual void unloadProjections(const Ice::Current& current = Ice::Current());
    protected:
      virtual RenderingDefProjectionsSeq getProjections(const Ice::Current& current = Ice::Current());
      virtual void setProjections(const RenderingDefProjectionsSeq& _projections, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isProjectionsLoaded();
      virtual Ice::Int sizeOfProjections(const Ice::Current& current = Ice::Current());
      virtual RenderingDefProjectionsSeq copyProjections(const Ice::Current& current = Ice::Current());
      virtual RenderingDefProjectionsSeq::iterator beginProjections();
      virtual RenderingDefProjectionsSeq::iterator endProjections();
      virtual void addProjectionDef(const ProjectionDefPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllProjectionDefSet(const RenderingDefProjectionsSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeProjectionDef(const ProjectionDefPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllProjectionDefSet(const RenderingDefProjectionsSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearProjections(const Ice::Current& current = Ice::Current());
      virtual void reloadProjections(const RenderingDefPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual ProjectionDefPtr getProjectionDef(int index, const Ice::Current& current = Ice::Current());
      virtual ProjectionDefPtr setProjectionDef(int index, const ProjectionDefPtr& element, const Ice::Current& current = Ice::Current());
      virtual ProjectionDefPtr getPrimaryProjectionDef(const Ice::Current& current = Ice::Current());
      virtual ProjectionDefPtr setPrimaryProjectionDef(const ProjectionDefPtr& element, const Ice::Current& current = Ice::Current());
 };

}}
#endif // RENDERINGDEFI_H
