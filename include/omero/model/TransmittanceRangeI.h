   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef TRANSMITTANCERANGEI_H
#define TRANSMITTANCERANGEI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/TransmittanceRange.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#if ICE_INT_VERSION / 100 >= 304
#   include <Ice/Handle.h>
#else
#   include <IceUtil/Handle.h>
#endif
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT TransmittanceRangeI;
  }
}
#if ICE_INT_VERSION / 100 >= 304
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::TransmittanceRangeI*);
}
#endif
namespace omero {
  namespace model {
#if ICE_INT_VERSION / 100 >= 304
  typedef IceInternal::Handle<TransmittanceRangeI> TransmittanceRangeIPtr;
#else
  typedef IceUtil::Handle<TransmittanceRangeI> TransmittanceRangeIPtr;
#endif
    class OMERO_CLIENT TransmittanceRangeI : virtual public TransmittanceRange {
   public:
      static const std::string CUTIN;
      static const std::string CUTOUT;
      static const std::string CUTINTOLERANCE;
      static const std::string CUTOUTTOLERANCE;
      static const std::string TRANSMITTANCE;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool /*unused*/);
      virtual ~TransmittanceRangeI();
    public:
      TransmittanceRangeI();
      TransmittanceRangeI(omero::RLongPtr idPtr, bool isLoaded = false);
      TransmittanceRangeI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  TransmittanceRange.cutIn
      //
      virtual void unloadCutIn();
      virtual omero::model::LengthPtr getCutIn(const Ice::Current& current = Ice::Current());
      virtual void setCutIn(const omero::model::LengthPtr& _cutIn, const Ice::Current& current = Ice::Current());

      //
      //  TransmittanceRange.cutOut
      //
      virtual void unloadCutOut();
      virtual omero::model::LengthPtr getCutOut(const Ice::Current& current = Ice::Current());
      virtual void setCutOut(const omero::model::LengthPtr& _cutOut, const Ice::Current& current = Ice::Current());

      //
      //  TransmittanceRange.cutInTolerance
      //
      virtual void unloadCutInTolerance();
      virtual omero::model::LengthPtr getCutInTolerance(const Ice::Current& current = Ice::Current());
      virtual void setCutInTolerance(const omero::model::LengthPtr& _cutInTolerance, const Ice::Current& current = Ice::Current());

      //
      //  TransmittanceRange.cutOutTolerance
      //
      virtual void unloadCutOutTolerance();
      virtual omero::model::LengthPtr getCutOutTolerance(const Ice::Current& current = Ice::Current());
      virtual void setCutOutTolerance(const omero::model::LengthPtr& _cutOutTolerance, const Ice::Current& current = Ice::Current());

      //
      //  TransmittanceRange.transmittance
      //
      virtual void unloadTransmittance();
      virtual omero::RDoublePtr getTransmittance(const Ice::Current& current = Ice::Current());
      virtual void setTransmittance(const omero::RDoublePtr& _transmittance, const Ice::Current& current = Ice::Current());
 };

}}
#endif // TRANSMITTANCERANGEI_H
