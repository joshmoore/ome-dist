   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef WELLI_H
#define WELLI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/Well.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT WellI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::WellI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<WellI> WellIPtr;
    class OMERO_CLIENT WellI : virtual public Well {
   public:
      static const std::string STATUS;
      static const std::string COLUMN;
      static const std::string ROW;
      static const std::string RED;
      static const std::string GREEN;
      static const std::string BLUE;
      static const std::string ALPHA;
      static const std::string REAGENTLINKS;
      static const std::string EXTERNALDESCRIPTION;
      static const std::string EXTERNALIDENTIFIER;
      static const std::string TYPE;
      static const std::string WELLSAMPLES;
      static const std::string PLATE;
      static const std::string ANNOTATIONLINKS;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool load);
      virtual ~WellI();
    public:
      WellI();
      WellI(omero::RLongPtr idPtr, bool isLoaded = false);
      WellI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  Well.status
      //
      virtual void unloadStatus();
      virtual omero::RStringPtr getStatus(const Ice::Current& current = Ice::Current());
      virtual void setStatus(const omero::RStringPtr& _status, const Ice::Current& current = Ice::Current());

      //
      //  Well.column
      //
      virtual void unloadColumn();
      virtual omero::RIntPtr getColumn(const Ice::Current& current = Ice::Current());
      virtual void setColumn(const omero::RIntPtr& _column, const Ice::Current& current = Ice::Current());

      //
      //  Well.row
      //
      virtual void unloadRow();
      virtual omero::RIntPtr getRow(const Ice::Current& current = Ice::Current());
      virtual void setRow(const omero::RIntPtr& _row, const Ice::Current& current = Ice::Current());

      //
      //  Well.red
      //
      virtual void unloadRed();
      virtual omero::RIntPtr getRed(const Ice::Current& current = Ice::Current());
      virtual void setRed(const omero::RIntPtr& _red, const Ice::Current& current = Ice::Current());

      //
      //  Well.green
      //
      virtual void unloadGreen();
      virtual omero::RIntPtr getGreen(const Ice::Current& current = Ice::Current());
      virtual void setGreen(const omero::RIntPtr& _green, const Ice::Current& current = Ice::Current());

      //
      //  Well.blue
      //
      virtual void unloadBlue();
      virtual omero::RIntPtr getBlue(const Ice::Current& current = Ice::Current());
      virtual void setBlue(const omero::RIntPtr& _blue, const Ice::Current& current = Ice::Current());

      //
      //  Well.alpha
      //
      virtual void unloadAlpha();
      virtual omero::RIntPtr getAlpha(const Ice::Current& current = Ice::Current());
      virtual void setAlpha(const omero::RIntPtr& _alpha, const Ice::Current& current = Ice::Current());

      //
      //  Well.reagentLinks
      //
      virtual void unloadReagentLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual WellReagentLinksSeq getReagentLinks(const Ice::Current& current = Ice::Current());
      virtual void setReagentLinks(const WellReagentLinksSeq& _reagentLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isReagentLinksLoaded();
      virtual Ice::Int sizeOfReagentLinks(const Ice::Current& current = Ice::Current());
      virtual WellReagentLinksSeq copyReagentLinks(const Ice::Current& current = Ice::Current());
      virtual WellReagentLinksSeq::iterator beginReagentLinks();
      virtual WellReagentLinksSeq::iterator endReagentLinks();
      virtual void addWellReagentLink(const WellReagentLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllWellReagentLinkSet(const WellReagentLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeWellReagentLink(const WellReagentLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllWellReagentLinkSet(const WellReagentLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearReagentLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadReagentLinks(const WellPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getReagentLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual WellReagentLinkPtr linkReagent(const ReagentPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addWellReagentLinkToBoth(const WellReagentLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
      virtual WellReagentLinksSeq findWellReagentLink(const ReagentPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkReagent(const ReagentPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeWellReagentLinkFromBoth(const WellReagentLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual WellLinkedReagentSeq linkedReagentList(const Ice::Current& current = Ice::Current());

      //
      //  Well.externalDescription
      //
      virtual void unloadExternalDescription();
      virtual omero::RStringPtr getExternalDescription(const Ice::Current& current = Ice::Current());
      virtual void setExternalDescription(const omero::RStringPtr& _externalDescription, const Ice::Current& current = Ice::Current());

      //
      //  Well.externalIdentifier
      //
      virtual void unloadExternalIdentifier();
      virtual omero::RStringPtr getExternalIdentifier(const Ice::Current& current = Ice::Current());
      virtual void setExternalIdentifier(const omero::RStringPtr& _externalIdentifier, const Ice::Current& current = Ice::Current());

      //
      //  Well.type
      //
      virtual void unloadType();
      virtual omero::RStringPtr getType(const Ice::Current& current = Ice::Current());
      virtual void setType(const omero::RStringPtr& _type, const Ice::Current& current = Ice::Current());

      //
      //  Well.wellSamples
      //
      virtual void unloadWellSamples(const Ice::Current& current = Ice::Current());
    protected:
      virtual WellWellSamplesSeq getWellSamples(const Ice::Current& current = Ice::Current());
      virtual void setWellSamples(const WellWellSamplesSeq& _wellSamples, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isWellSamplesLoaded();
      virtual Ice::Int sizeOfWellSamples(const Ice::Current& current = Ice::Current());
      virtual WellWellSamplesSeq copyWellSamples(const Ice::Current& current = Ice::Current());
      virtual WellWellSamplesSeq::iterator beginWellSamples();
      virtual WellWellSamplesSeq::iterator endWellSamples();
      virtual void addWellSample(const WellSamplePtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllWellSampleSet(const WellWellSamplesSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeWellSample(const WellSamplePtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllWellSampleSet(const WellWellSamplesSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearWellSamples(const Ice::Current& current = Ice::Current());
      virtual void reloadWellSamples(const WellPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual WellSamplePtr getWellSample(int index, const Ice::Current& current = Ice::Current());
      virtual WellSamplePtr setWellSample(int index, const WellSamplePtr& element, const Ice::Current& current = Ice::Current());
      virtual WellSamplePtr getPrimaryWellSample(const Ice::Current& current = Ice::Current());
      virtual WellSamplePtr setPrimaryWellSample(const WellSamplePtr& element, const Ice::Current& current = Ice::Current());

      //
      //  Well.plate
      //
      virtual void unloadPlate();
      virtual omero::model::PlatePtr getPlate(const Ice::Current& current = Ice::Current());
      virtual void setPlate(const omero::model::PlatePtr& _plate, const Ice::Current& current = Ice::Current());

      //
      //  Well.annotationLinks
      //
      virtual void unloadAnnotationLinks(const Ice::Current& current = Ice::Current());
    protected:
      virtual WellAnnotationLinksSeq getAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void setAnnotationLinks(const WellAnnotationLinksSeq& _annotationLinks, const Ice::Current& current = Ice::Current());
    public:
      virtual bool isAnnotationLinksLoaded();
      virtual Ice::Int sizeOfAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual WellAnnotationLinksSeq copyAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual WellAnnotationLinksSeq::iterator beginAnnotationLinks();
      virtual WellAnnotationLinksSeq::iterator endAnnotationLinks();
      virtual void addWellAnnotationLink(const WellAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void addAllWellAnnotationLinkSet(const WellAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void removeWellAnnotationLink(const WellAnnotationLinkPtr& target, const Ice::Current& current = Ice::Current());
      virtual void removeAllWellAnnotationLinkSet(const WellAnnotationLinksSeq& targets, const Ice::Current& current = Ice::Current());
      virtual void clearAnnotationLinks(const Ice::Current& current = Ice::Current());
      virtual void reloadAnnotationLinks(const WellPtr& toCopy, const Ice::Current& current = Ice::Current());
      virtual omero::sys::CountMap getAnnotationLinksCountPerOwner(const Ice::Current& current = Ice::Current());
      virtual WellAnnotationLinkPtr linkAnnotation(const AnnotationPtr& addition, const Ice::Current& current = Ice::Current());
      virtual void addWellAnnotationLinkToBoth(const WellAnnotationLinkPtr& link, bool /*unused*/, const Ice::Current& current = Ice::Current());
      virtual WellAnnotationLinksSeq findWellAnnotationLink(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void unlinkAnnotation(const AnnotationPtr& removal, const Ice::Current& current = Ice::Current());
      virtual void removeWellAnnotationLinkFromBoth(const WellAnnotationLinkPtr& link, bool bothSides, const Ice::Current& current = Ice::Current());
       virtual WellLinkedAnnotationSeq linkedAnnotationList(const Ice::Current& current = Ice::Current());
 };

}}
#endif // WELLI_H
