   /*
   **   Generated by blitz/resources/templates/combined.vm
   **   See ../../README.h for information on these types.
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
#ifndef WELLSAMPLEI_H
#define WELLSAMPLEI_H
#include <omero/IceNoWarnPush.h>
#include <omero/RTypes.h>
#include <omero/model/RTypes.h>
#include <omero/model/IObject.h>
#include <omero/model/WellSample.h>
#include <omero/IceNoWarnPop.h>
#include <omero/ClientErrors.h>
#include <omero/model/DetailsI.h>
#include <omero/model/NamedValue.h>
#include <omero/templates.h>
#include <IceUtil/Config.h>
#include <Ice/Handle.h>
#ifndef OMERO_CLIENT
#   ifdef OMERO_CLIENT_EXPORTS
#       define OMERO_CLIENT ICE_DECLSPEC_EXPORT
#   else
#       define OMERO_CLIENT ICE_DECLSPEC_IMPORT
#   endif
#endif
namespace omero {
  namespace model {
    class OMERO_CLIENT WellSampleI;
  }
}
namespace IceInternal {
  OMERO_CLIENT ::Ice::Object* upCast(::omero::model::WellSampleI*);
}
namespace omero {
  namespace model {
  typedef IceInternal::Handle<WellSampleI> WellSampleIPtr;
    class OMERO_CLIENT WellSampleI : virtual public WellSample {
   public:
      static const std::string POSX;
      static const std::string POSY;
      static const std::string TIMEPOINT;
      static const std::string PLATEACQUISITION;
      static const std::string WELL;
      static const std::string IMAGE;
      static const std::string DETAILS;
    protected:
      void errorIfUnloaded();
      void throwNullCollectionException(std::string propertyName);
      virtual void toggleCollectionsLoaded(bool /*unused*/);
      virtual ~WellSampleI();
    public:
      WellSampleI();
      WellSampleI(omero::RLongPtr idPtr, bool isLoaded = false);
      WellSampleI(Ice::Long id, bool isLoaded = false);
      virtual void unload(const Ice::Current& current = Ice::Current());
      virtual bool isLoaded(const Ice::Current& current = Ice::Current());
      virtual void unloadCollections(const Ice::Current& current = Ice::Current());
      virtual bool isGlobal(const Ice::Current& current = Ice::Current());
      virtual bool isMutable(const Ice::Current& current = Ice::Current());
      virtual bool isAnnotated(const Ice::Current& current = Ice::Current());
      virtual bool isLink(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr shallowCopy(const Ice::Current& current = Ice::Current());
      virtual omero::model::IObjectPtr proxy(const Ice::Current& current = Ice::Current());
      virtual omero::model::DetailsPtr getDetails(const Ice::Current& current = Ice::Current());
      virtual void unloadDetails(const Ice::Current& current = Ice::Current());
      virtual omero::RLongPtr getId(const Ice::Current& current = Ice::Current());
      virtual void setId( const omero::RLongPtr& id, const Ice::Current& current = Ice::Current() );
      virtual omero::RIntPtr getVersion(const Ice::Current& current = Ice::Current());
      virtual void setVersion( const omero::RIntPtr& version, const Ice::Current& current = Ice::Current() );

      //
      //  WellSample.posX
      //
      virtual void unloadPosX();
      virtual omero::model::LengthPtr getPosX(const Ice::Current& current = Ice::Current());
      virtual void setPosX(const omero::model::LengthPtr& _posX, const Ice::Current& current = Ice::Current());

      //
      //  WellSample.posY
      //
      virtual void unloadPosY();
      virtual omero::model::LengthPtr getPosY(const Ice::Current& current = Ice::Current());
      virtual void setPosY(const omero::model::LengthPtr& _posY, const Ice::Current& current = Ice::Current());

      //
      //  WellSample.timepoint
      //
      virtual void unloadTimepoint();
      virtual omero::RTimePtr getTimepoint(const Ice::Current& current = Ice::Current());
      virtual void setTimepoint(const omero::RTimePtr& _timepoint, const Ice::Current& current = Ice::Current());

      //
      //  WellSample.plateAcquisition
      //
      virtual void unloadPlateAcquisition();
      virtual omero::model::PlateAcquisitionPtr getPlateAcquisition(const Ice::Current& current = Ice::Current());
      virtual void setPlateAcquisition(const omero::model::PlateAcquisitionPtr& _plateAcquisition, const Ice::Current& current = Ice::Current());

      //
      //  WellSample.well
      //
      virtual void unloadWell();
      virtual omero::model::WellPtr getWell(const Ice::Current& current = Ice::Current());
      virtual void setWell(const omero::model::WellPtr& _well, const Ice::Current& current = Ice::Current());

      //
      //  WellSample.image
      //
      virtual void unloadImage();
      virtual omero::model::ImagePtr getImage(const Ice::Current& current = Ice::Current());
      virtual void setImage(const omero::model::ImagePtr& _image, const Ice::Current& current = Ice::Current());
 };

}}
#endif // WELLSAMPLEI_H
