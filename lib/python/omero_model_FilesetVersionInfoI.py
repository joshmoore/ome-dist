"""
   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
"""
import Ice
import IceImport
import omero
IceImport.load("omero_model_DetailsI")
IceImport.load("omero_model_FilesetVersionInfo_ice")
from omero.rtypes import rlong
from collections import namedtuple
_omero = Ice.openModule("omero")
_omero_model = Ice.openModule("omero.model")
__name__ = "omero.model"
class FilesetVersionInfoI(_omero_model.FilesetVersionInfo):

      # Property Metadata
      _field_info_data = namedtuple("FieldData", ["wrapper", "nullable"])
      _field_info_type = namedtuple("FieldInfo", [
          "bioformatsReader",
          "bioformatsVersion",
          "omeroVersion",
          "osArchitecture",
          "osName",
          "osVersion",
          "locale",
          "details",
      ])
      _field_info = _field_info_type(
          bioformatsReader=_field_info_data(wrapper=omero.rtypes.rstring, nullable=False),
          bioformatsVersion=_field_info_data(wrapper=omero.rtypes.rstring, nullable=False),
          omeroVersion=_field_info_data(wrapper=omero.rtypes.rstring, nullable=False),
          osArchitecture=_field_info_data(wrapper=omero.rtypes.rstring, nullable=False),
          osName=_field_info_data(wrapper=omero.rtypes.rstring, nullable=False),
          osVersion=_field_info_data(wrapper=omero.rtypes.rstring, nullable=False),
          locale=_field_info_data(wrapper=omero.rtypes.rstring, nullable=False),
          details=_field_info_data(wrapper=omero.proxy_to_instance, nullable=True),
      )  # end _field_info
      BIOFORMATSREADER =  "ome.model.fs.FilesetVersionInfo_bioformatsReader"
      BIOFORMATSVERSION =  "ome.model.fs.FilesetVersionInfo_bioformatsVersion"
      OMEROVERSION =  "ome.model.fs.FilesetVersionInfo_omeroVersion"
      OSARCHITECTURE =  "ome.model.fs.FilesetVersionInfo_osArchitecture"
      OSNAME =  "ome.model.fs.FilesetVersionInfo_osName"
      OSVERSION =  "ome.model.fs.FilesetVersionInfo_osVersion"
      LOCALE =  "ome.model.fs.FilesetVersionInfo_locale"
      DETAILS =  "ome.model.fs.FilesetVersionInfo_details"
      def errorIfUnloaded(self):
          if not self._loaded:
              raise _omero.UnloadedEntityException("Object unloaded:"+str(self))

      def throwNullCollectionException(self,propertyName):
          raise _omero.UnloadedEntityException(""+
          "Error updating collection:" + propertyName +"\n"+
          "Collection is currently null. This can be seen\n" +
          "by testing \""+ propertyName +"Loaded\". This implies\n"+
          "that this collection was unloaded. Please refresh this object\n"+
          "in order to update this collection.\n")

      def _toggleCollectionsLoaded(self,load):
          pass

      def __init__(self, id=None, loaded=None):
          super(FilesetVersionInfoI, self).__init__()
          if id is not None and isinstance(id, (str, unicode)) and ":" in id:
              parts = id.split(":")
              if len(parts) != 2:
                  raise Exception("Invalid proxy string: %s", id)
              if parts[0] != self.__class__.__name__ and \
                 parts[0]+"I" != self.__class__.__name__:
                  raise Exception("Proxy class mismatch: %s<>%s" %
                  (self.__class__.__name__, parts[0]))
              self._id = rlong(parts[1])
              if loaded is None:
                  # If no loadedness was requested with
                  # a proxy string, then assume False.
                  loaded = False
          else:
              # Relying on omero.rtypes.rlong's error-handling
              self._id = rlong(id)
              if loaded is None:
                  loaded = True  # Assume true as previously
          self._loaded = loaded
          if self._loaded:
             self._details = _omero_model.DetailsI()
             self._toggleCollectionsLoaded(True)

      def unload(self, current = None):
          self._loaded = False
          self.unloadBioformatsReader( )
          self.unloadBioformatsVersion( )
          self.unloadOmeroVersion( )
          self.unloadOsArchitecture( )
          self.unloadOsName( )
          self.unloadOsVersion( )
          self.unloadLocale( )
          self.unloadDetails( )

      def isLoaded(self, current = None):
          return self._loaded
      def unloadCollections(self, current = None):
          self._toggleCollectionsLoaded( False )
      def isGlobal(self, current = None):
          return  False ;
      def isMutable(self, current = None):
          return  True ;
      def isAnnotated(self, current = None):
          return  False ;
      def isLink(self, current = None):
          return  False ;
      def shallowCopy(self, current = None):
            if not self._loaded: return self.proxy()
            copy = FilesetVersionInfoI()
            copy._id = self._id;
            copy._version = self._version;
            copy._details = None  # Unloading for the moment.
            raise omero.ClientError("NYI")
      def proxy(self, current = None):
          if self._id is None: raise omero.ClientError("Proxies require an id")
          return FilesetVersionInfoI( self._id.getValue(), False )

      def getDetails(self, current = None):
          self.errorIfUnloaded()
          return self._details

      def unloadDetails(self, current = None):
          self._details = None

      def getId(self, current = None):
          return self._id

      def setId(self, _id, current = None):
          self._id = _id

      def checkUnloadedProperty(self, value, loadedField):
          if value == None:
              self.__dict__[loadedField] = False
          else:
              self.__dict__[loadedField] = True

      def getVersion(self, current = None):
          self.errorIfUnloaded()
          return self._version

      def setVersion(self, version, current = None):
          self.errorIfUnloaded()
          self._version = version

      def unloadBioformatsReader(self, ):
          self._bioformatsReaderLoaded = False
          self._bioformatsReader = None;

      def getBioformatsReader(self, current = None):
          self.errorIfUnloaded()
          return self._bioformatsReader

      def setBioformatsReader(self, _bioformatsReader, current = None, wrap=False):
          self.errorIfUnloaded()
          if wrap and self._field_info.bioformatsReader.wrapper is not None:
              if _bioformatsReader is not None:
                  _bioformatsReader = self._field_info.bioformatsReader.wrapper(_bioformatsReader)
          self._bioformatsReader = _bioformatsReader
          pass

      def unloadBioformatsVersion(self, ):
          self._bioformatsVersionLoaded = False
          self._bioformatsVersion = None;

      def getBioformatsVersion(self, current = None):
          self.errorIfUnloaded()
          return self._bioformatsVersion

      def setBioformatsVersion(self, _bioformatsVersion, current = None, wrap=False):
          self.errorIfUnloaded()
          if wrap and self._field_info.bioformatsVersion.wrapper is not None:
              if _bioformatsVersion is not None:
                  _bioformatsVersion = self._field_info.bioformatsVersion.wrapper(_bioformatsVersion)
          self._bioformatsVersion = _bioformatsVersion
          pass

      def unloadOmeroVersion(self, ):
          self._omeroVersionLoaded = False
          self._omeroVersion = None;

      def getOmeroVersion(self, current = None):
          self.errorIfUnloaded()
          return self._omeroVersion

      def setOmeroVersion(self, _omeroVersion, current = None, wrap=False):
          self.errorIfUnloaded()
          if wrap and self._field_info.omeroVersion.wrapper is not None:
              if _omeroVersion is not None:
                  _omeroVersion = self._field_info.omeroVersion.wrapper(_omeroVersion)
          self._omeroVersion = _omeroVersion
          pass

      def unloadOsArchitecture(self, ):
          self._osArchitectureLoaded = False
          self._osArchitecture = None;

      def getOsArchitecture(self, current = None):
          self.errorIfUnloaded()
          return self._osArchitecture

      def setOsArchitecture(self, _osArchitecture, current = None, wrap=False):
          self.errorIfUnloaded()
          if wrap and self._field_info.osArchitecture.wrapper is not None:
              if _osArchitecture is not None:
                  _osArchitecture = self._field_info.osArchitecture.wrapper(_osArchitecture)
          self._osArchitecture = _osArchitecture
          pass

      def unloadOsName(self, ):
          self._osNameLoaded = False
          self._osName = None;

      def getOsName(self, current = None):
          self.errorIfUnloaded()
          return self._osName

      def setOsName(self, _osName, current = None, wrap=False):
          self.errorIfUnloaded()
          if wrap and self._field_info.osName.wrapper is not None:
              if _osName is not None:
                  _osName = self._field_info.osName.wrapper(_osName)
          self._osName = _osName
          pass

      def unloadOsVersion(self, ):
          self._osVersionLoaded = False
          self._osVersion = None;

      def getOsVersion(self, current = None):
          self.errorIfUnloaded()
          return self._osVersion

      def setOsVersion(self, _osVersion, current = None, wrap=False):
          self.errorIfUnloaded()
          if wrap and self._field_info.osVersion.wrapper is not None:
              if _osVersion is not None:
                  _osVersion = self._field_info.osVersion.wrapper(_osVersion)
          self._osVersion = _osVersion
          pass

      def unloadLocale(self, ):
          self._localeLoaded = False
          self._locale = None;

      def getLocale(self, current = None):
          self.errorIfUnloaded()
          return self._locale

      def setLocale(self, _locale, current = None, wrap=False):
          self.errorIfUnloaded()
          if wrap and self._field_info.locale.wrapper is not None:
              if _locale is not None:
                  _locale = self._field_info.locale.wrapper(_locale)
          self._locale = _locale
          pass


      def ice_postUnmarshal(self):
          """
          Provides additional initialization once all data loaded
          """
          pass # Currently unused


      def ice_preMarshal(self):
          """
          Provides additional validation before data is sent
          """
          pass # Currently unused

      def __getattr__(self, name):
          import __builtin__
          """
          Reroutes all access to object.field through object.getField() or object.isField()
          """
          if "_" in name:  # Ice disallows underscores, so these should be treated normally.
              return object.__getattribute__(self, name)
          field  = "_" + name
          capitalized = name[0].capitalize() + name[1:]
          getter = "get" + capitalized
          questn = "is" + capitalized
          try:
              self.__dict__[field]
              if hasattr(self, getter):
                  method = getattr(self, getter)
                  return method()
              elif hasattr(self, questn):
                  method = getattr(self, questn)
                  return method()
          except:
              pass
          raise AttributeError("'%s' object has no attribute '%s' or '%s'" % (self.__class__.__name__, getter, questn))

      def __setattr__(self, name, value):
          """
          Reroutes all access to object.field through object.getField(), with the caveat
          that all sets on variables starting with "_" are permitted directly.
          """
          if name.startswith("_"):
              self.__dict__[name] = value
              return
          else:
              field  = "_" + name
              setter = "set" + name[0].capitalize() + name[1:]
              if hasattr(self, field) and hasattr(self, setter):
                  method = getattr(self, setter)
                  return method(value)
          raise AttributeError("'%s' object has no attribute '%s'" % (self.__class__.__name__, setter))

_omero_model.FilesetVersionInfoI = FilesetVersionInfoI
