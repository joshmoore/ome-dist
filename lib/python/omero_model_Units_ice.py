# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `Units.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__

# Start of module omero
_M_omero = Ice.openModule('omero')
__name__ = 'omero'

# Start of module omero.model
_M_omero.model = Ice.openModule('omero.model')
__name__ = 'omero.model'

# Start of module omero.model.enums
_M_omero.model.enums = Ice.openModule('omero.model.enums')
__name__ = 'omero.model.enums'

if not _M_omero.model.enums.__dict__.has_key('UnitsElectricPotential'):
    _M_omero.model.enums.UnitsElectricPotential = Ice.createTempClass()
    class UnitsElectricPotential(object):

        def __init__(self, val):
            assert(val >= 0 and val < 21)
            self.value = val

        def __str__(self):
            return self._names[self.value]

        __repr__ = __str__

        def __hash__(self):
            return self.value

        def __lt__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsElectricPotential):
                return self.value < other.value;
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsElectricPotential):
                return self.value <= other.value;
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsElectricPotential):
                return self.value == other.value;
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsElectricPotential):
                return self.value != other.value;
            elif other == None:
                return False
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsElectricPotential):
                return self.value > other.value;
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsElectricPotential):
                return self.value >= other.value;
            elif other == None:
                return False
            return NotImplemented

        _names = ('YOTTAVOLT', 'ZETTAVOLT', 'EXAVOLT', 'PETAVOLT', 'TERAVOLT', 'GIGAVOLT', 'MEGAVOLT', 'KILOVOLT', 'HECTOVOLT', 'DECAVOLT', 'VOLT', 'DECIVOLT', 'CENTIVOLT', 'MILLIVOLT', 'MICROVOLT', 'NANOVOLT', 'PICOVOLT', 'FEMTOVOLT', 'ATTOVOLT', 'ZEPTOVOLT', 'YOCTOVOLT')

    UnitsElectricPotential.YOTTAVOLT = UnitsElectricPotential(0)
    UnitsElectricPotential.ZETTAVOLT = UnitsElectricPotential(1)
    UnitsElectricPotential.EXAVOLT = UnitsElectricPotential(2)
    UnitsElectricPotential.PETAVOLT = UnitsElectricPotential(3)
    UnitsElectricPotential.TERAVOLT = UnitsElectricPotential(4)
    UnitsElectricPotential.GIGAVOLT = UnitsElectricPotential(5)
    UnitsElectricPotential.MEGAVOLT = UnitsElectricPotential(6)
    UnitsElectricPotential.KILOVOLT = UnitsElectricPotential(7)
    UnitsElectricPotential.HECTOVOLT = UnitsElectricPotential(8)
    UnitsElectricPotential.DECAVOLT = UnitsElectricPotential(9)
    UnitsElectricPotential.VOLT = UnitsElectricPotential(10)
    UnitsElectricPotential.DECIVOLT = UnitsElectricPotential(11)
    UnitsElectricPotential.CENTIVOLT = UnitsElectricPotential(12)
    UnitsElectricPotential.MILLIVOLT = UnitsElectricPotential(13)
    UnitsElectricPotential.MICROVOLT = UnitsElectricPotential(14)
    UnitsElectricPotential.NANOVOLT = UnitsElectricPotential(15)
    UnitsElectricPotential.PICOVOLT = UnitsElectricPotential(16)
    UnitsElectricPotential.FEMTOVOLT = UnitsElectricPotential(17)
    UnitsElectricPotential.ATTOVOLT = UnitsElectricPotential(18)
    UnitsElectricPotential.ZEPTOVOLT = UnitsElectricPotential(19)
    UnitsElectricPotential.YOCTOVOLT = UnitsElectricPotential(20)

    _M_omero.model.enums._t_UnitsElectricPotential = IcePy.defineEnum('::omero::model::enums::UnitsElectricPotential', UnitsElectricPotential, (), (UnitsElectricPotential.YOTTAVOLT, UnitsElectricPotential.ZETTAVOLT, UnitsElectricPotential.EXAVOLT, UnitsElectricPotential.PETAVOLT, UnitsElectricPotential.TERAVOLT, UnitsElectricPotential.GIGAVOLT, UnitsElectricPotential.MEGAVOLT, UnitsElectricPotential.KILOVOLT, UnitsElectricPotential.HECTOVOLT, UnitsElectricPotential.DECAVOLT, UnitsElectricPotential.VOLT, UnitsElectricPotential.DECIVOLT, UnitsElectricPotential.CENTIVOLT, UnitsElectricPotential.MILLIVOLT, UnitsElectricPotential.MICROVOLT, UnitsElectricPotential.NANOVOLT, UnitsElectricPotential.PICOVOLT, UnitsElectricPotential.FEMTOVOLT, UnitsElectricPotential.ATTOVOLT, UnitsElectricPotential.ZEPTOVOLT, UnitsElectricPotential.YOCTOVOLT))

    _M_omero.model.enums.UnitsElectricPotential = UnitsElectricPotential
    del UnitsElectricPotential

if not _M_omero.model.enums.__dict__.has_key('UnitsFrequency'):
    _M_omero.model.enums.UnitsFrequency = Ice.createTempClass()
    class UnitsFrequency(object):

        def __init__(self, val):
            assert(val >= 0 and val < 21)
            self.value = val

        def __str__(self):
            return self._names[self.value]

        __repr__ = __str__

        def __hash__(self):
            return self.value

        def __lt__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsFrequency):
                return self.value < other.value;
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsFrequency):
                return self.value <= other.value;
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsFrequency):
                return self.value == other.value;
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsFrequency):
                return self.value != other.value;
            elif other == None:
                return False
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsFrequency):
                return self.value > other.value;
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsFrequency):
                return self.value >= other.value;
            elif other == None:
                return False
            return NotImplemented

        _names = ('YOTTAHERTZ', 'ZETTAHERTZ', 'EXAHERTZ', 'PETAHERTZ', 'TERAHERTZ', 'GIGAHERTZ', 'MEGAHERTZ', 'KILOHERTZ', 'HECTOHERTZ', 'DECAHERTZ', 'HERTZ', 'DECIHERTZ', 'CENTIHERTZ', 'MILLIHERTZ', 'MICROHERTZ', 'NANOHERTZ', 'PICOHERTZ', 'FEMTOHERTZ', 'ATTOHERTZ', 'ZEPTOHERTZ', 'YOCTOHERTZ')

    UnitsFrequency.YOTTAHERTZ = UnitsFrequency(0)
    UnitsFrequency.ZETTAHERTZ = UnitsFrequency(1)
    UnitsFrequency.EXAHERTZ = UnitsFrequency(2)
    UnitsFrequency.PETAHERTZ = UnitsFrequency(3)
    UnitsFrequency.TERAHERTZ = UnitsFrequency(4)
    UnitsFrequency.GIGAHERTZ = UnitsFrequency(5)
    UnitsFrequency.MEGAHERTZ = UnitsFrequency(6)
    UnitsFrequency.KILOHERTZ = UnitsFrequency(7)
    UnitsFrequency.HECTOHERTZ = UnitsFrequency(8)
    UnitsFrequency.DECAHERTZ = UnitsFrequency(9)
    UnitsFrequency.HERTZ = UnitsFrequency(10)
    UnitsFrequency.DECIHERTZ = UnitsFrequency(11)
    UnitsFrequency.CENTIHERTZ = UnitsFrequency(12)
    UnitsFrequency.MILLIHERTZ = UnitsFrequency(13)
    UnitsFrequency.MICROHERTZ = UnitsFrequency(14)
    UnitsFrequency.NANOHERTZ = UnitsFrequency(15)
    UnitsFrequency.PICOHERTZ = UnitsFrequency(16)
    UnitsFrequency.FEMTOHERTZ = UnitsFrequency(17)
    UnitsFrequency.ATTOHERTZ = UnitsFrequency(18)
    UnitsFrequency.ZEPTOHERTZ = UnitsFrequency(19)
    UnitsFrequency.YOCTOHERTZ = UnitsFrequency(20)

    _M_omero.model.enums._t_UnitsFrequency = IcePy.defineEnum('::omero::model::enums::UnitsFrequency', UnitsFrequency, (), (UnitsFrequency.YOTTAHERTZ, UnitsFrequency.ZETTAHERTZ, UnitsFrequency.EXAHERTZ, UnitsFrequency.PETAHERTZ, UnitsFrequency.TERAHERTZ, UnitsFrequency.GIGAHERTZ, UnitsFrequency.MEGAHERTZ, UnitsFrequency.KILOHERTZ, UnitsFrequency.HECTOHERTZ, UnitsFrequency.DECAHERTZ, UnitsFrequency.HERTZ, UnitsFrequency.DECIHERTZ, UnitsFrequency.CENTIHERTZ, UnitsFrequency.MILLIHERTZ, UnitsFrequency.MICROHERTZ, UnitsFrequency.NANOHERTZ, UnitsFrequency.PICOHERTZ, UnitsFrequency.FEMTOHERTZ, UnitsFrequency.ATTOHERTZ, UnitsFrequency.ZEPTOHERTZ, UnitsFrequency.YOCTOHERTZ))

    _M_omero.model.enums.UnitsFrequency = UnitsFrequency
    del UnitsFrequency

if not _M_omero.model.enums.__dict__.has_key('UnitsLength'):
    _M_omero.model.enums.UnitsLength = Ice.createTempClass()
    class UnitsLength(object):

        def __init__(self, val):
            assert(val >= 0 and val < 34)
            self.value = val

        def __str__(self):
            return self._names[self.value]

        __repr__ = __str__

        def __hash__(self):
            return self.value

        def __lt__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsLength):
                return self.value < other.value;
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsLength):
                return self.value <= other.value;
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsLength):
                return self.value == other.value;
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsLength):
                return self.value != other.value;
            elif other == None:
                return False
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsLength):
                return self.value > other.value;
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsLength):
                return self.value >= other.value;
            elif other == None:
                return False
            return NotImplemented

        _names = ('YOTTAMETER', 'ZETTAMETER', 'EXAMETER', 'PETAMETER', 'TERAMETER', 'GIGAMETER', 'MEGAMETER', 'KILOMETER', 'HECTOMETER', 'DECAMETER', 'METER', 'DECIMETER', 'CENTIMETER', 'MILLIMETER', 'MICROMETER', 'NANOMETER', 'PICOMETER', 'FEMTOMETER', 'ATTOMETER', 'ZEPTOMETER', 'YOCTOMETER', 'ANGSTROM', 'ASTRONOMICALUNIT', 'LIGHTYEAR', 'PARSEC', 'THOU', 'LINE', 'INCH', 'FOOT', 'YARD', 'MILE', 'POINT', 'PIXEL', 'REFERENCEFRAME')

    UnitsLength.YOTTAMETER = UnitsLength(0)
    UnitsLength.ZETTAMETER = UnitsLength(1)
    UnitsLength.EXAMETER = UnitsLength(2)
    UnitsLength.PETAMETER = UnitsLength(3)
    UnitsLength.TERAMETER = UnitsLength(4)
    UnitsLength.GIGAMETER = UnitsLength(5)
    UnitsLength.MEGAMETER = UnitsLength(6)
    UnitsLength.KILOMETER = UnitsLength(7)
    UnitsLength.HECTOMETER = UnitsLength(8)
    UnitsLength.DECAMETER = UnitsLength(9)
    UnitsLength.METER = UnitsLength(10)
    UnitsLength.DECIMETER = UnitsLength(11)
    UnitsLength.CENTIMETER = UnitsLength(12)
    UnitsLength.MILLIMETER = UnitsLength(13)
    UnitsLength.MICROMETER = UnitsLength(14)
    UnitsLength.NANOMETER = UnitsLength(15)
    UnitsLength.PICOMETER = UnitsLength(16)
    UnitsLength.FEMTOMETER = UnitsLength(17)
    UnitsLength.ATTOMETER = UnitsLength(18)
    UnitsLength.ZEPTOMETER = UnitsLength(19)
    UnitsLength.YOCTOMETER = UnitsLength(20)
    UnitsLength.ANGSTROM = UnitsLength(21)
    UnitsLength.ASTRONOMICALUNIT = UnitsLength(22)
    UnitsLength.LIGHTYEAR = UnitsLength(23)
    UnitsLength.PARSEC = UnitsLength(24)
    UnitsLength.THOU = UnitsLength(25)
    UnitsLength.LINE = UnitsLength(26)
    UnitsLength.INCH = UnitsLength(27)
    UnitsLength.FOOT = UnitsLength(28)
    UnitsLength.YARD = UnitsLength(29)
    UnitsLength.MILE = UnitsLength(30)
    UnitsLength.POINT = UnitsLength(31)
    UnitsLength.PIXEL = UnitsLength(32)
    UnitsLength.REFERENCEFRAME = UnitsLength(33)

    _M_omero.model.enums._t_UnitsLength = IcePy.defineEnum('::omero::model::enums::UnitsLength', UnitsLength, (), (UnitsLength.YOTTAMETER, UnitsLength.ZETTAMETER, UnitsLength.EXAMETER, UnitsLength.PETAMETER, UnitsLength.TERAMETER, UnitsLength.GIGAMETER, UnitsLength.MEGAMETER, UnitsLength.KILOMETER, UnitsLength.HECTOMETER, UnitsLength.DECAMETER, UnitsLength.METER, UnitsLength.DECIMETER, UnitsLength.CENTIMETER, UnitsLength.MILLIMETER, UnitsLength.MICROMETER, UnitsLength.NANOMETER, UnitsLength.PICOMETER, UnitsLength.FEMTOMETER, UnitsLength.ATTOMETER, UnitsLength.ZEPTOMETER, UnitsLength.YOCTOMETER, UnitsLength.ANGSTROM, UnitsLength.ASTRONOMICALUNIT, UnitsLength.LIGHTYEAR, UnitsLength.PARSEC, UnitsLength.THOU, UnitsLength.LINE, UnitsLength.INCH, UnitsLength.FOOT, UnitsLength.YARD, UnitsLength.MILE, UnitsLength.POINT, UnitsLength.PIXEL, UnitsLength.REFERENCEFRAME))

    _M_omero.model.enums.UnitsLength = UnitsLength
    del UnitsLength

if not _M_omero.model.enums.__dict__.has_key('UnitsPower'):
    _M_omero.model.enums.UnitsPower = Ice.createTempClass()
    class UnitsPower(object):

        def __init__(self, val):
            assert(val >= 0 and val < 21)
            self.value = val

        def __str__(self):
            return self._names[self.value]

        __repr__ = __str__

        def __hash__(self):
            return self.value

        def __lt__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsPower):
                return self.value < other.value;
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsPower):
                return self.value <= other.value;
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsPower):
                return self.value == other.value;
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsPower):
                return self.value != other.value;
            elif other == None:
                return False
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsPower):
                return self.value > other.value;
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsPower):
                return self.value >= other.value;
            elif other == None:
                return False
            return NotImplemented

        _names = ('YOTTAWATT', 'ZETTAWATT', 'EXAWATT', 'PETAWATT', 'TERAWATT', 'GIGAWATT', 'MEGAWATT', 'KILOWATT', 'HECTOWATT', 'DECAWATT', 'WATT', 'DECIWATT', 'CENTIWATT', 'MILLIWATT', 'MICROWATT', 'NANOWATT', 'PICOWATT', 'FEMTOWATT', 'ATTOWATT', 'ZEPTOWATT', 'YOCTOWATT')

    UnitsPower.YOTTAWATT = UnitsPower(0)
    UnitsPower.ZETTAWATT = UnitsPower(1)
    UnitsPower.EXAWATT = UnitsPower(2)
    UnitsPower.PETAWATT = UnitsPower(3)
    UnitsPower.TERAWATT = UnitsPower(4)
    UnitsPower.GIGAWATT = UnitsPower(5)
    UnitsPower.MEGAWATT = UnitsPower(6)
    UnitsPower.KILOWATT = UnitsPower(7)
    UnitsPower.HECTOWATT = UnitsPower(8)
    UnitsPower.DECAWATT = UnitsPower(9)
    UnitsPower.WATT = UnitsPower(10)
    UnitsPower.DECIWATT = UnitsPower(11)
    UnitsPower.CENTIWATT = UnitsPower(12)
    UnitsPower.MILLIWATT = UnitsPower(13)
    UnitsPower.MICROWATT = UnitsPower(14)
    UnitsPower.NANOWATT = UnitsPower(15)
    UnitsPower.PICOWATT = UnitsPower(16)
    UnitsPower.FEMTOWATT = UnitsPower(17)
    UnitsPower.ATTOWATT = UnitsPower(18)
    UnitsPower.ZEPTOWATT = UnitsPower(19)
    UnitsPower.YOCTOWATT = UnitsPower(20)

    _M_omero.model.enums._t_UnitsPower = IcePy.defineEnum('::omero::model::enums::UnitsPower', UnitsPower, (), (UnitsPower.YOTTAWATT, UnitsPower.ZETTAWATT, UnitsPower.EXAWATT, UnitsPower.PETAWATT, UnitsPower.TERAWATT, UnitsPower.GIGAWATT, UnitsPower.MEGAWATT, UnitsPower.KILOWATT, UnitsPower.HECTOWATT, UnitsPower.DECAWATT, UnitsPower.WATT, UnitsPower.DECIWATT, UnitsPower.CENTIWATT, UnitsPower.MILLIWATT, UnitsPower.MICROWATT, UnitsPower.NANOWATT, UnitsPower.PICOWATT, UnitsPower.FEMTOWATT, UnitsPower.ATTOWATT, UnitsPower.ZEPTOWATT, UnitsPower.YOCTOWATT))

    _M_omero.model.enums.UnitsPower = UnitsPower
    del UnitsPower

if not _M_omero.model.enums.__dict__.has_key('UnitsPressure'):
    _M_omero.model.enums.UnitsPressure = Ice.createTempClass()
    class UnitsPressure(object):

        def __init__(self, val):
            assert(val >= 0 and val < 32)
            self.value = val

        def __str__(self):
            return self._names[self.value]

        __repr__ = __str__

        def __hash__(self):
            return self.value

        def __lt__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsPressure):
                return self.value < other.value;
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsPressure):
                return self.value <= other.value;
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsPressure):
                return self.value == other.value;
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsPressure):
                return self.value != other.value;
            elif other == None:
                return False
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsPressure):
                return self.value > other.value;
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsPressure):
                return self.value >= other.value;
            elif other == None:
                return False
            return NotImplemented

        _names = ('YOTTAPASCAL', 'ZETTAPASCAL', 'EXAPASCAL', 'PETAPASCAL', 'TERAPASCAL', 'GIGAPASCAL', 'MEGAPASCAL', 'KILOPASCAL', 'HECTOPASCAL', 'DECAPASCAL', 'Pascal', 'DECIPASCAL', 'CENTIPASCAL', 'MILLIPASCAL', 'MICROPASCAL', 'NANOPASCAL', 'PICOPASCAL', 'FEMTOPASCAL', 'ATTOPASCAL', 'ZEPTOPASCAL', 'YOCTOPASCAL', 'BAR', 'MEGABAR', 'KILOBAR', 'DECIBAR', 'CENTIBAR', 'MILLIBAR', 'ATMOSPHERE', 'PSI', 'TORR', 'MILLITORR', 'MMHG')

    UnitsPressure.YOTTAPASCAL = UnitsPressure(0)
    UnitsPressure.ZETTAPASCAL = UnitsPressure(1)
    UnitsPressure.EXAPASCAL = UnitsPressure(2)
    UnitsPressure.PETAPASCAL = UnitsPressure(3)
    UnitsPressure.TERAPASCAL = UnitsPressure(4)
    UnitsPressure.GIGAPASCAL = UnitsPressure(5)
    UnitsPressure.MEGAPASCAL = UnitsPressure(6)
    UnitsPressure.KILOPASCAL = UnitsPressure(7)
    UnitsPressure.HECTOPASCAL = UnitsPressure(8)
    UnitsPressure.DECAPASCAL = UnitsPressure(9)
    UnitsPressure.Pascal = UnitsPressure(10)
    UnitsPressure.DECIPASCAL = UnitsPressure(11)
    UnitsPressure.CENTIPASCAL = UnitsPressure(12)
    UnitsPressure.MILLIPASCAL = UnitsPressure(13)
    UnitsPressure.MICROPASCAL = UnitsPressure(14)
    UnitsPressure.NANOPASCAL = UnitsPressure(15)
    UnitsPressure.PICOPASCAL = UnitsPressure(16)
    UnitsPressure.FEMTOPASCAL = UnitsPressure(17)
    UnitsPressure.ATTOPASCAL = UnitsPressure(18)
    UnitsPressure.ZEPTOPASCAL = UnitsPressure(19)
    UnitsPressure.YOCTOPASCAL = UnitsPressure(20)
    UnitsPressure.BAR = UnitsPressure(21)
    UnitsPressure.MEGABAR = UnitsPressure(22)
    UnitsPressure.KILOBAR = UnitsPressure(23)
    UnitsPressure.DECIBAR = UnitsPressure(24)
    UnitsPressure.CENTIBAR = UnitsPressure(25)
    UnitsPressure.MILLIBAR = UnitsPressure(26)
    UnitsPressure.ATMOSPHERE = UnitsPressure(27)
    UnitsPressure.PSI = UnitsPressure(28)
    UnitsPressure.TORR = UnitsPressure(29)
    UnitsPressure.MILLITORR = UnitsPressure(30)
    UnitsPressure.MMHG = UnitsPressure(31)

    _M_omero.model.enums._t_UnitsPressure = IcePy.defineEnum('::omero::model::enums::UnitsPressure', UnitsPressure, (), (UnitsPressure.YOTTAPASCAL, UnitsPressure.ZETTAPASCAL, UnitsPressure.EXAPASCAL, UnitsPressure.PETAPASCAL, UnitsPressure.TERAPASCAL, UnitsPressure.GIGAPASCAL, UnitsPressure.MEGAPASCAL, UnitsPressure.KILOPASCAL, UnitsPressure.HECTOPASCAL, UnitsPressure.DECAPASCAL, UnitsPressure.Pascal, UnitsPressure.DECIPASCAL, UnitsPressure.CENTIPASCAL, UnitsPressure.MILLIPASCAL, UnitsPressure.MICROPASCAL, UnitsPressure.NANOPASCAL, UnitsPressure.PICOPASCAL, UnitsPressure.FEMTOPASCAL, UnitsPressure.ATTOPASCAL, UnitsPressure.ZEPTOPASCAL, UnitsPressure.YOCTOPASCAL, UnitsPressure.BAR, UnitsPressure.MEGABAR, UnitsPressure.KILOBAR, UnitsPressure.DECIBAR, UnitsPressure.CENTIBAR, UnitsPressure.MILLIBAR, UnitsPressure.ATMOSPHERE, UnitsPressure.PSI, UnitsPressure.TORR, UnitsPressure.MILLITORR, UnitsPressure.MMHG))

    _M_omero.model.enums.UnitsPressure = UnitsPressure
    del UnitsPressure

if not _M_omero.model.enums.__dict__.has_key('UnitsTemperature'):
    _M_omero.model.enums.UnitsTemperature = Ice.createTempClass()
    class UnitsTemperature(object):

        def __init__(self, val):
            assert(val >= 0 and val < 4)
            self.value = val

        def __str__(self):
            return self._names[self.value]

        __repr__ = __str__

        def __hash__(self):
            return self.value

        def __lt__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsTemperature):
                return self.value < other.value;
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsTemperature):
                return self.value <= other.value;
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsTemperature):
                return self.value == other.value;
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsTemperature):
                return self.value != other.value;
            elif other == None:
                return False
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsTemperature):
                return self.value > other.value;
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsTemperature):
                return self.value >= other.value;
            elif other == None:
                return False
            return NotImplemented

        _names = ('KELVIN', 'CELSIUS', 'FAHRENHEIT', 'RANKINE')

    UnitsTemperature.KELVIN = UnitsTemperature(0)
    UnitsTemperature.CELSIUS = UnitsTemperature(1)
    UnitsTemperature.FAHRENHEIT = UnitsTemperature(2)
    UnitsTemperature.RANKINE = UnitsTemperature(3)

    _M_omero.model.enums._t_UnitsTemperature = IcePy.defineEnum('::omero::model::enums::UnitsTemperature', UnitsTemperature, (), (UnitsTemperature.KELVIN, UnitsTemperature.CELSIUS, UnitsTemperature.FAHRENHEIT, UnitsTemperature.RANKINE))

    _M_omero.model.enums.UnitsTemperature = UnitsTemperature
    del UnitsTemperature

if not _M_omero.model.enums.__dict__.has_key('UnitsTime'):
    _M_omero.model.enums.UnitsTime = Ice.createTempClass()
    class UnitsTime(object):

        def __init__(self, val):
            assert(val >= 0 and val < 24)
            self.value = val

        def __str__(self):
            return self._names[self.value]

        __repr__ = __str__

        def __hash__(self):
            return self.value

        def __lt__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsTime):
                return self.value < other.value;
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsTime):
                return self.value <= other.value;
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsTime):
                return self.value == other.value;
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsTime):
                return self.value != other.value;
            elif other == None:
                return False
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsTime):
                return self.value > other.value;
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_omero.model.enums.UnitsTime):
                return self.value >= other.value;
            elif other == None:
                return False
            return NotImplemented

        _names = ('YOTTASECOND', 'ZETTASECOND', 'EXASECOND', 'PETASECOND', 'TERASECOND', 'GIGASECOND', 'MEGASECOND', 'KILOSECOND', 'HECTOSECOND', 'DECASECOND', 'SECOND', 'DECISECOND', 'CENTISECOND', 'MILLISECOND', 'MICROSECOND', 'NANOSECOND', 'PICOSECOND', 'FEMTOSECOND', 'ATTOSECOND', 'ZEPTOSECOND', 'YOCTOSECOND', 'MINUTE', 'HOUR', 'DAY')

    UnitsTime.YOTTASECOND = UnitsTime(0)
    UnitsTime.ZETTASECOND = UnitsTime(1)
    UnitsTime.EXASECOND = UnitsTime(2)
    UnitsTime.PETASECOND = UnitsTime(3)
    UnitsTime.TERASECOND = UnitsTime(4)
    UnitsTime.GIGASECOND = UnitsTime(5)
    UnitsTime.MEGASECOND = UnitsTime(6)
    UnitsTime.KILOSECOND = UnitsTime(7)
    UnitsTime.HECTOSECOND = UnitsTime(8)
    UnitsTime.DECASECOND = UnitsTime(9)
    UnitsTime.SECOND = UnitsTime(10)
    UnitsTime.DECISECOND = UnitsTime(11)
    UnitsTime.CENTISECOND = UnitsTime(12)
    UnitsTime.MILLISECOND = UnitsTime(13)
    UnitsTime.MICROSECOND = UnitsTime(14)
    UnitsTime.NANOSECOND = UnitsTime(15)
    UnitsTime.PICOSECOND = UnitsTime(16)
    UnitsTime.FEMTOSECOND = UnitsTime(17)
    UnitsTime.ATTOSECOND = UnitsTime(18)
    UnitsTime.ZEPTOSECOND = UnitsTime(19)
    UnitsTime.YOCTOSECOND = UnitsTime(20)
    UnitsTime.MINUTE = UnitsTime(21)
    UnitsTime.HOUR = UnitsTime(22)
    UnitsTime.DAY = UnitsTime(23)

    _M_omero.model.enums._t_UnitsTime = IcePy.defineEnum('::omero::model::enums::UnitsTime', UnitsTime, (), (UnitsTime.YOTTASECOND, UnitsTime.ZETTASECOND, UnitsTime.EXASECOND, UnitsTime.PETASECOND, UnitsTime.TERASECOND, UnitsTime.GIGASECOND, UnitsTime.MEGASECOND, UnitsTime.KILOSECOND, UnitsTime.HECTOSECOND, UnitsTime.DECASECOND, UnitsTime.SECOND, UnitsTime.DECISECOND, UnitsTime.CENTISECOND, UnitsTime.MILLISECOND, UnitsTime.MICROSECOND, UnitsTime.NANOSECOND, UnitsTime.PICOSECOND, UnitsTime.FEMTOSECOND, UnitsTime.ATTOSECOND, UnitsTime.ZEPTOSECOND, UnitsTime.YOCTOSECOND, UnitsTime.MINUTE, UnitsTime.HOUR, UnitsTime.DAY))

    _M_omero.model.enums.UnitsTime = UnitsTime
    del UnitsTime

# End of module omero.model.enums

__name__ = 'omero.model'

# End of module omero.model

__name__ = 'omero'

# End of module omero
